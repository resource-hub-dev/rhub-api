model:

  Location:
    type: object
    properties:
      id:
        allOf:
          - $ref: 'common.yml#/model/ID'
          - readOnly: true
      name:
        type: string
        description: Short name of location / IATA identifier / ...
        maxLength: 32
        example: RDU
      description:
        type: string
        description: Long description of location, address, ...
        nullable: true
        example: Raleigh

  Quota:
    type: object
    properties:
      num_vcpus:
        type: integer
        minimum: 0
        nullable: true
      ram_mb:
        type: integer
        minimum: 0
        nullable: true
      num_volumes:
        type: integer
        minimum: 0
        nullable: true
      volumes_gb:
        type: integer
        minimum: 0
        nullable: true

  Region:
    type: object
    properties:
      id:
        allOf:
          - $ref: 'common.yml#/model/ID'
          - readOnly: true
      name:
        type: string
        maxLength: 32
        example: rdu2-a
      location_id:
        anyOf:
          - $ref: 'common.yml#/model/ID'
          - nullable: true
      location:
        readOnly: true
        anyOf:
          - $ref: '#/model/Location'
          - nullable: true
      description:
        type: string
      banner:
        type: string
      enabled:
        type: boolean
      reservations_enabled:
        type: boolean
      reservation_expiration_max:
        type: integer
        nullable: true
      lifespan_length:
        type: integer
        minimum: 1
        nullable: true
      user_quota:
        anyOf:
          - $ref: '#/model/Quota'
          - nullable: true
        example:
          num_vcpus: 40
          ram_mb: 200000
          num_volumes: 40
          volumes_gb: 540
      total_quota:
        anyOf:
          - $ref: '#/model/Quota'
          - nullable: true
        example:
          num_vcpus: 40000
          ram_mb: 200000000
          num_volumes: 40000
          volumes_gb: 540000
      owner_group_id:
        type: string
        format: uuid
        example: 7670ac07-cb21-448d-af8a-6e3882216be3
      owner_group_name:
        type: string
        nullable: true
        readOnly: true
      users_group_id:
        type: string
        format: uuid
        nullable: true
      users_group_name:
        type: string
        nullable: true
        readOnly: true
      tower_id:
        $ref: 'common.yml#/model/ID'
      openstack_id:
        $ref: 'common.yml#/model/ID'
      openstack:
        allOf:
          - $ref: 'openstack.yml#/model/Cloud'
          - readOnly: true
      openstack_keyname:
        description: SSH key name
        type: string
        maxLength: 64
      satellite_id:
        anyOf:
          - $ref: 'common.yml#/model/ID'
          - nullable: true
      satellite:
        anyOf:
          - $ref: 'satellite.yml#/model/Server'
          - nullable: true
        readOnly: true

  ClusterStatus:
    type: string
    nullable: true
    enum:
      - Active
      - Create Failed
      - Deleted
      - Delete Failed
      - Deleting
      - Deletion Failed
      - Deletion Queued
      - Installation Failed
      - Installation Queued
      - Installing
      - Post-Deleting
      - Post-Deletion Failed
      - Post-Deletion Queued
      - Post-Installation Failed
      - Post-Installation Queued
      - Post-Installing
      - Post-Provisioning
      - Post-Provisioning Failed
      - Post-Provisioning Queued
      - Pre-Deleting
      - Pre-Deletion Failed
      - Pre-Deletion Queued
      - Pre-Installation Failed
      - Pre-Installation Queued
      - Pre-Installing
      - Pre-Provisioning
      - Pre-Provisioning Failed
      - Pre-Provisioning Queued
      - Provisioning
      - Provisioning Failed
      - Provisioning Queued
      - Queued

  ClusterStatusFlag:
    type: string
    nullable: true
    enum:
      - active
      - creating
      - deleted
      - deleting
      - failed

  Cluster:
    type: object
    properties:
      id:
        allOf:
          - $ref: 'common.yml#/model/ID'
          - readOnly: true
      name:
        type: string
        pattern: '^[a-z0-9]+$'
        maxLength: 20
      description:
        type: string
      owner_id:
        type: string
        format: uuid
        readOnly: true
      owner_name:
        type: string
        readOnly: true
      group_id:
        type: string
        format: uuid
        nullable: true
        readOnly: true
      group_name:
        type: string
        nullable: true
        readOnly: true
      shared:
        type: boolean
      created:
        type: string
        format: date-time
        readOnly: true
      region_id:
        $ref: 'common.yml#/model/ID'
      region_name:
        type: string
        readOnly: true
      reservation_expiration:
        type: string
        format: date-time
        description: Soft-limit expiration.
        nullable: true
      lifespan_expiration:
        type: string
        format: date-time
        description: Hard-limit expiration.
        nullable: true
      status:
        $ref: '#/model/ClusterStatus'
      status_flag:
        allOf:
          - $ref: '#/model/ClusterStatusFlag'
          - readOnly: true
      quota:
        anyOf:
          - $ref: '#/model/Quota'
          - nullable: true
        example:
          num_vcpus: 40
          ram_mb: 200000
          num_volumes: 40
          volumes_gb: 540
      quota_usage:
        anyOf:
          - $ref: '#/model/Quota'
          - nullable: true
        example:
          num_vcpus: 16
          ram_mb: 64000
          num_volumes: 2
          volumes_gb: 256
      hosts:
        type: array
        readOnly: true
        items:
          $ref: '#/model/ClusterHost'
      product_id:
        $ref: 'common.yml#/model/ID'
      product_name:
        type: string
        readOnly: true
      product_params:
        type: object
      project_id:
        $ref: 'common.yml#/model/ID'
      project_name:
        type: string
        readOnly: true

  ClusterEvent:
    type: object
    properties:
      id:
        allOf:
          - $ref: 'common.yml#/model/ID'
          - readOnly: true
      date:
        type: string
        format: date-time
        readOnly: true
      user_id:
        type: string
        format: uuid
        nullable: true
      user_name:
        type: string
        nullable: true
        readOnly: true
      cluster_id:
        allOf:
          - $ref: 'common.yml#/model/ID'
          - readOnly: true
    oneOf:
      - properties:
          type:
            type: string
            enum: [tower_job]
          tower_id:
            anyOf:
              - $ref: 'common.yml#/model/ID'
              - nullable: true
          tower_job_id:
            anyOf:
              - $ref: 'common.yml#/model/ID'
              - nullable: true
          status:
            $ref: '#/model/ClusterStatus'
      - properties:
          type:
            type: string
            enum: [status_change]
          old_value:
            anyOf:
              - $ref: '#/model/ClusterStatus'
              - nullable: true
            example: Queued
          new_value:
            anyOf:
              - $ref: '#/model/ClusterStatus'
              - nullable: true
            example: Active
      - properties:
          type:
            type: string
            enum: [reservation_change, lifespan_change]
          old_value:
            type: string
            format: date-time
            nullable: true
          new_value:
            type: string
            format: date-time
            nullable: true

  ClusterHost:
    type: object
    properties:
      id:
        allOf:
          - $ref: 'common.yml#/model/ID'
          - readOnly: true
      cluster_id:
        allOf:
          - $ref: 'common.yml#/model/ID'
          - readOnly: true
      fqdn:
        type: string
        maxLength: 256
        format: hostname
      num_vcpus:
        type: integer
        nullable: true
      ram_mb:
        type: integer
        nullable: true
      num_volumes:
        type: integer
        nullable: true
      volumes_gb:
        type: integer
        nullable: true
      ipaddr:
        type: array
        items:
          oneOf:
            - type: string
              format: ipv4
            - type: string
              format: ipv6

  Product:
    type: object
    properties:
      id:
        allOf:
          - $ref: 'common.yml#/model/ID'
          - readOnly: true
      name:
        type: string
        maxLength: 64
        example: OpenShift
      description:
        type: string
      enabled:
        type: boolean
      tower_template_name_create:
        type: string
        maxLength: 128
        example: rhub-openshift-create
      tower_template_name_delete:
        type: string
        maxLength: 128
        example: rhub-openshift-delete
      flavors:
        type: object
        additionalProperties:
          $ref: '#/model/Quota'
        nullable: true
      parameters:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            variable:
              type: string
            required:
              type: boolean
            type:
              type: string
            advanced:
              description: Option is for advanced users
              type: boolean
              default: false
            condition:
              description: Condition for extra validations that need values from other options.
              type: object
              properties:
                msg:
                  type: string
                data:
                  type: array
              example: {msg: "Extra_nic must be true and num_nodes must be great than 1",
                        data: ["and", ["param_eq", "extra_nic", true], ["param_gt", "num_nodes", 1]]}
              nullable: true
            display_condition:
              description: Condition when to display option based on the values of other options.
              nullable: true
          oneOf:
            - description: string variable
              properties:
                type:
                  enum: [string]
                default:
                  type: string
                  nullable: true
                minLength:
                  type: integer
                  nullable: true
                maxLength:
                  type: integer
                  nullable: true
                enum:
                  type: array
                  items:
                    type: string
                  nullable: true
              example:
                name: Version
                description: OpenShift version to install.
                variable: version
                required: true
                type: string
                default: 4.8.0
                enum: [4.8.0, 4.8.1, 4.8.2]
                advanced: false
            - description: integer variable
              properties:
                type:
                  enum: [integer]
                default:
                  type: integer
                  nullable: true
                min:
                  type: integer
                  nullable: true
                max:
                  type: integer
                  nullable: true
                enum:
                  type: array
                  items:
                    type: integer
                  nullable: true
              example:
                name: Number of workers
                description: Number of worker nodes in your cluster.
                variable: num_workers
                required: true
                type: integer
                default: 3
                advanced: false
                min: 1
                max: 3
            - description: boolean variable
              properties:
                type:
                  enum: [boolean]
                default:
                  type: boolean
                  nullable: true
              example:
                name: Keep bootstrap node
                description: Toggles if bootstrap node will be deleted in post-installation step
                variable: keep_boostrap
                type: boolean
                default: false
                advanced: true
          required:
            - name
            - variable
            - required
            - type


parameters:

  location_id:
    name: location_id
    in: path
    description: ID of the location
    required: true
    schema:
      $ref: 'common.yml#/model/ID'
  region_id:
    name: region_id
    in: path
    description: ID of the region
    required: true
    schema:
      $ref: 'common.yml#/model/ID'
  cluster_id:
    name: cluster_id
    in: path
    description: ID of the cluster
    required: true
    schema:
      $ref: 'common.yml#/model/ID'
  product_id:
    name: product_id
    in: path
    description: ID of the product
    required: true
    schema:
      $ref: 'common.yml#/model/ID'
  event_id:
    name: event_id
    in: path
    description: ID of the event
    required: true
    schema:
      $ref: 'common.yml#/model/ID'

endpoints:

  location_list:
    summary: Get location list
    tags: [lab]
    operationId: rhub.api.lab.location.location_list
    parameters:
      - name: sort
        in: query
        description: Sort regions by attribute.
        schema:
          type: string
          enum:
            - name
            - -name
      - name: page
        in: query
        description: Page number (``0`` indexed).
        schema:
          type: integer
          minimum: 0
      - name: limit
        in: query
        schema:
          type: integer
          minimum: 1
    responses:
      '200':
        description: List of Location
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/model/Location'
                total:
                  type: integer
                  minimum: 0
                  description: The total number of items
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  location_create:
    summary: Create location
    tags: [lab]
    operationId: rhub.api.lab.location.location_create
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/model/Location'
              - required:
                  - name
    responses:
      '200':
        description: Success
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  location_get:
    summary: Get location
    tags: [lab]
    operationId: rhub.api.lab.location.location_get
    parameters:
      - $ref: '#/parameters/location_id'
    responses:
      '200':
        description: Location
        content:
          application/json:
            schema:
              $ref: '#/model/Location'
      '404':
        description: Not found
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  location_update:
    summary: Update location
    tags: [lab]
    operationId: rhub.api.lab.location.location_update
    parameters:
      - $ref: '#/parameters/location_id'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/model/Location'
    responses:
      '200':
        description: Success
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  location_delete:
    summary: Delete location
    tags: [lab]
    operationId: rhub.api.lab.location.location_delete
    parameters:
      - $ref: '#/parameters/location_id'
    responses:
      '204':
        description: Success
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  location_region_list:
    summary: Get list of regions in the location.
    tags: [lab]
    operationId: rhub.api.lab.location.location_region_list
    parameters:
      - $ref: '#/parameters/location_id'
      - name: filter
        in: query
        description: Filter regions by attributes.
        explode: false
        schema:
          type: object
          properties:
            name:
              type: string
              description: >
                Name of a region. Wildcard ``%`` can be used to match zero, one,
                or multiple characters
            location:
              type: string
              description: >
                Location of a region. Wildcard ``%`` can be used to match zero,
                one, or multiple characters
            enabled:
              type: boolean
            reservations_enabled:
              type: boolean
      - name: page
        in: query
        description: Page number (``0`` indexed).
        schema:
          type: integer
          minimum: 0
      - name: limit
        in: query
        schema:
          type: integer
          minimum: 1
    responses:
      '200':
        description: List of Region
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    $ref: 'common.yml#/model/ID'
                  enabled:
                    type: boolean
                  region:
                    $ref: '#/model/Region'
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  region_list:
    summary: Get region list
    tags: [lab]
    operationId: rhub.api.lab.region.list_regions
    parameters:
      - name: filter
        in: query
        description: Filter regions by attributes.
        explode: false
        schema:
          type: object
          properties:
            name:
              type: string
              description: >
                Name of a region. Wildcard ``%`` can be used to match zero, one,
                or multiple characters
            location:
              type: string
              description: >
                Location of a region, value is location name. Wildcard ``%`` can
                be used to match zero, one, or multiple characters
            enabled:
              type: boolean
            reservations_enabled:
              type: boolean
      - name: sort
        in: query
        description: Sort regions by attribute.
        schema:
          type: string
          enum:
            - name
            - -name
            - location
            - -location
            - reservation_expiration_max
            - -reservation_expiration_max
      - name: page
        in: query
        description: Page number (``0`` indexed).
        schema:
          type: integer
          minimum: 0
      - name: limit
        in: query
        schema:
          type: integer
          minimum: 1
    responses:
      '200':
        description: List of Region
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/model/Region'
                total:
                  type: integer
                  minimum: 0
                  description: The total number of items
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  region_create:
    summary: Create region
    description: |
      See [create cluster endpoint](#/lab/rhub.api.lab.cluster.create_cluster)
      for more info how reservation, lifespan, and other properties affects clusters.

      `quota` and `lifespan` can be set to `null` to provide unlimited access
      to the region.

      `users_group` limits region to a selected group of users, if the value
      is `null` any user can use region.
    tags: [lab]
    operationId: rhub.api.lab.region.create_region
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/model/Region'
              - required:
                  - name
                  - owner_group_id
                  - openstack_id
                  - tower_id
    responses:
      '200':
        description: Success
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  region_get:
    summary: Get region
    tags: [lab]
    operationId: rhub.api.lab.region.get_region
    parameters:
      - $ref: '#/parameters/region_id'
    responses:
      '200':
        description: Region
        content:
          application/json:
            schema:
              $ref: '#/model/Region'
      '404':
        description: Not found
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  region_update:
    summary: Update region
    tags: [lab]
    operationId: rhub.api.lab.region.update_region
    parameters:
      - $ref: '#/parameters/region_id'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/model/Region'
          example:
            lifespan_length: 60
            quota:
              num_vcpus: 40
              ram_mb: 200000
              num_volumes: 40
              volumes_gb: 500
    responses:
      '200':
        description: Success
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  region_delete:
    summary: Delete region
    tags: [lab]
    operationId: rhub.api.lab.region.delete_region
    parameters:
      - $ref: '#/parameters/region_id'
    responses:
      '204':
        description: Success
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  region_list_products:
    summary: Get list of products that can be installed in the selected region.
    tags: [lab]
    operationId: rhub.api.lab.region.list_region_products
    parameters:
      - $ref: '#/parameters/region_id'
      - name: filter
        in: query
        description: Filter products by attributes.
        explode: false
        schema:
          type: object
          properties:
            name:
              type: string
              description: >
                Name of a product. Wildcard ``%`` can be used to match zero,
                one, or multiple characters
            enabled:
              type: boolean
    responses:
      '200':
        description: List of Product
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  enabled:
                    type: boolean
                  product:
                    $ref: '#/model/Product'
                  product_id:
                    $ref: 'common.yml#/model/ID'
                  region_id:
                    $ref: 'common.yml#/model/ID'
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  region_add_product:
    summary: Add product to region or disable/enable product in region
    tags: [lab]
    operationId: rhub.api.lab.region.add_region_product
    parameters:
      - $ref: '#/parameters/region_id'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: 'common.yml#/model/ID'
              enabled:
                type: boolean
          examples:
            add:
              summary: Add product to region
              value: {"id": 1}
            disable:
              summary: Disable product in region
              value: {"id": 1, "enabled": false}
    responses:
      '204':
        description: Success
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  region_remove_product:
    summary: Remove product from region
    tags: [lab]
    operationId: rhub.api.lab.region.delete_region_product
    parameters:
      - $ref: '#/parameters/region_id'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: 'common.yml#/model/ID'
    responses:
      '204':
        description: Success
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  region_get_usage:
    summary: Get region usage
    description: |
      `user_quota`,`user_quota_usage`, `total_quota` and `total_quota_usage` are
      values calculated from the data we store about clusters. In other words,
      it's how many resources Resource Hub can use (quota), and how many it
      currently uses (quota usage). It does not count resources that are not
      managed by Resource Hub.

      User quota and its usage is scoped to the currently logged in user. Total
      quota is overall quota and usage of the region.
    tags: [lab]
    operationId: rhub.api.lab.region.get_usage
    parameters:
      - $ref: '#/parameters/region_id'
    responses:
      '200':
        description: Success
        content:
          application/json:
            schema:
              type: object
              properties:
                user_quota:
                  anyOf:
                    - $ref: '#/model/Quota'
                    - nullable: true
                user_quota_usage:
                  $ref: '#/model/Quota'
                total_quota:
                  anyOf:
                    - $ref: '#/model/Quota'
                    - nullable: true
                total_quota_usage:
                  $ref: '#/model/Quota'
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  region_get_all_usage:
    summary: Get all region usage
    description: Get user's usage across all regions they have access to
    tags: [lab]
    operationId: rhub.api.lab.region.get_all_usage
    responses:
      '200':
        description: Success
        content:
          application/json:
            schema:
              type: object
              properties:
                user_quota:
                  anyOf:
                    - $ref: '#/model/Quota'
                    - nullable: true
                user_quota_usage:
                  $ref: '#/model/Quota'
                total_quota:
                  anyOf:
                    - $ref: '#/model/Quota'
                    - nullable: true
                total_quota_usage:
                  $ref: '#/model/Quota'
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  product_list:
    summary: Get product list
    tags: [lab]
    operationId: rhub.api.lab.product.list_products
    parameters:
      - name: filter
        in: query
        description: Filter products by attributes.
        explode: false
        schema:
          type: object
          properties:
            name:
              type: string
              description: >
                Name of a product. Wildcard ``%`` can be used to match zero, one,
                or multiple characters
            enabled:
              type: boolean
      - name: sort
        in: query
        description: Sort products by attribute.
        schema:
          type: string
          enum:
            - name
            - -name
      - name: page
        in: query
        description: Page number (``0`` indexed).
        schema:
          type: integer
          minimum: 0
      - name: limit
        in: query
        schema:
          type: integer
          minimum: 1
    responses:
      '200':
        description: List of Product
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/model/Product'
                total:
                  type: integer
                  minimum: 0
                  description: The total number of items
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  product_create:
    summary: Create product
    description: |
      `tower_template_name_create` is the Tower template name to create the
      cluster, and `tower_template_name_delete` to delete.
    tags: [lab]
    operationId: rhub.api.lab.product.create_product
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/model/Product'
              - required:
                  - name
                  - tower_template_name_create
                  - tower_template_name_delete
                  - parameters
    responses:
      '200':
        description: Success
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  product_get:
    summary: Get product
    tags: [lab]
    operationId: rhub.api.lab.product.get_product
    parameters:
      - $ref: '#/parameters/product_id'
    responses:
      '200':
        description: Product
        content:
          application/json:
            schema:
              $ref: '#/model/Product'
      '404':
        description: Not found
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  product_update:
    summary: Update product
    tags: [lab]
    operationId: rhub.api.lab.product.update_product
    parameters:
      - $ref: '#/parameters/product_id'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/model/Product'
    responses:
      '200':
        description: Success
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  product_delete:
    summary: Delete product
    tags: [lab]
    operationId: rhub.api.lab.product.delete_product
    parameters:
      - $ref: '#/parameters/product_id'
    responses:
      '204':
        description: Success
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  product_list_regions:
    summary: Get list of regions where product can be installed.
    tags: [lab]
    operationId: rhub.api.lab.product.list_product_regions
    parameters:
      - $ref: '#/parameters/product_id'
      - name: filter
        in: query
        description: Filter regions by attributes.
        explode: false
        schema:
          type: object
          properties:
            name:
              type: string
              description: >
                Name of a region. Wildcard ``%`` can be used to match zero, one,
                or multiple characters
            location:
              type: string
              description: >
                Location of a region. Wildcard ``%`` can be used to match zero,
                one, or multiple characters
            enabled:
              type: boolean
            reservations_enabled:
              type: boolean
      - name: page
        in: query
        description: Page number (``0`` indexed).
        schema:
          type: integer
          minimum: 0
      - name: limit
        in: query
        schema:
          type: integer
          minimum: 1
    responses:
      '200':
        description: List of Region
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  enabled:
                    type: boolean
                  region:
                    $ref: '#/model/Region'
                  region_id:
                    $ref: 'common.yml#/model/ID'
                  product_id:
                    $ref: 'common.yml#/model/ID'
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  cluster_list:
    summary: Get cluster list
    tags: [lab]
    operationId: rhub.api.lab.cluster.list_clusters
    parameters:
      - name: filter
        in: query
        description: Filter clusters by attributes.
        explode: false
        schema:
          type: object
          properties:
            name:
              type: string
              pattern: '^[\w%]+$'
              description: >
                Name of a cluster. Wildcard ``%`` can be used to match zero, one, or
                multiple characters
            region_id:
              type: integer
              minimum: 1
              description: ID of the region.
            user_id:
              description: ID of the user.
              type: string
              format: uuid
            group_id:
              type: string
              format: uuid
              nullable: true
              description: ID of the group or ``null``.
            status:
              $ref: '#/model/ClusterStatus'
            status_flag:
              $ref: '#/model/ClusterStatusFlag'
            shared:
              type: boolean
              description: Filter shared clusters
            deleted:
              type: boolean
              description: |
                List deleted clusters. By default deleted clusters are not
                included in the listing. When this filter is set to `true` only
                deleted clusters will be listed.
      - name: sort
        in: query
        description: Sort clusters by attribute.
        schema:
          type: string
          enum:
            - name
            - -name
            - reservation_expiration
            - -reservation_expiration
            - lifespan_expiration
            - -lifespan_expiration
      - name: page
        in: query
        description: Page number (``0`` indexed).
        schema:
          type: integer
          minimum: 0
      - name: limit
        in: query
        schema:
          type: integer
          minimum: 1
    responses:
      '200':
        description: List of Cluster
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/model/Cluster'
                total:
                  type: integer
                  minimum: 0
                  description: The total number of items.
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  cluster_create:
    summary: Create cluster
    description: |
      Create a new cluster and install selected product. If cluster provisioning
      and product installation is successfully queued in region Tower, cluster
      creation is considered as successful by this endpoint. Provisioning or
      installation takes some time and can fail. Use _GET_ endpoint to get the
      current status of cluster.

      ## Reservation system

      When the Reservation System is enabled in a region, a new cluster in
      that region will be required to select the length of the reservation in
      `reservation_expiration` field. Reservation sets soft-limit on cluster,
      when reservation expires cluster will be scheduled for deletion. Maximal
      `reservation_expiration` date is determined from the date of creation (or
      current expiration date when extending expiration) and
      `reservation_expiration_max` attribute on the region.

      When the Lifespan System is enabled in a region, `lifespan_expiration`
      date will automatically be applied to the cluster by backend at time of
      creation. The date is configured on region. Unlike the reservation
      expiration, lifespan is hard-limit and this date can not be set nor
      modified once cluster is created. When lifespan expires cluster will be
      unconditionally scheduled for deletion.

      ## Shared cluster

      All users can use shared clusters even if they don't have permissions for
      the cluster region or reservations in the region are disabled.

      Shared clusters are created in a special group, if `shared` is set to
      `true` when creating cluster, provided `group_id` will be ignored.
      Reservation expiration and also lifespan expiration is disabled on shared
      clusters, and only user with `sharedcluster` role can create shared
      clusters.

      ## Product

      If product parameters are invalid, problem response may have extra field
      `invalid_product_params` with a short description why parameters are not
      valid (eg. `{"example_param": "is required"}`).
    tags: [lab]
    operationId: rhub.api.lab.cluster.create_cluster
    requestBody:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/model/Cluster'
              - required:
                  - name
                  - region_id
                  - product_id
                  - product_params
    responses:
      '200':
        description: Cluster
        content:
          application/json:
            schema:
              $ref: '#/model/Cluster'
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  cluster_get:
    summary: Get cluster
    tags: [lab]
    operationId: rhub.api.lab.cluster.get_cluster
    parameters:
      - $ref: '#/parameters/cluster_id'
    responses:
      '200':
        description: Cluster
        content:
          application/json:
            schema:
              $ref: '#/model/Cluster'
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  cluster_update:
    summary: Update cluster
    description: |
      See [create cluster endpoint](#/lab/rhub.api.lab.cluster.create_cluster) for more info.
    tags: [lab]
    operationId: rhub.api.lab.cluster.update_cluster
    parameters:
      - $ref: '#/parameters/cluster_id'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/model/Cluster'
    responses:
      '200':
        description: Cluster
        content:
          application/json:
            schema:
              $ref: '#/model/Cluster'
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  cluster_delete:
    summary: Delete cluster
    description: |
      Clusters are not deleted immediately after calling this endpoint. Instead,
      Tower job will be launched (`Product.tower_template_name_delete`) and the
      cluster is marked as deleted from the job by changing status to "Deleted".
      If deletion fails status should be changed to "Deletion Failed" and
      cluster won't be deleted.

      Clusters that are in a creating state cannot be deleted. Before deleting,
      the cluster must be in the `Active` state or in any of failed states.
    tags: [lab]
    operationId: rhub.api.lab.cluster.delete_cluster
    parameters:
      - $ref: '#/parameters/cluster_id'
    responses:
      '204':
        description: Success
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  cluster_list_events:
    summary: Get cluster events list
    tags: [lab]
    operationId: rhub.api.lab.cluster.list_cluster_events
    parameters:
      - $ref: '#/parameters/cluster_id'
    responses:
      '200':
        description: Cluster events
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/model/ClusterEvent'
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  cluster_event_get:
    summary: Get cluster event
    tags: [lab]
    operationId: rhub.api.lab.cluster.get_cluster_event
    parameters:
      - $ref: '#/parameters/event_id'
    responses:
      '200':
        description: Cluster event
        content:
          application/json:
            schema:
              $ref: '#/model/ClusterEvent'
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  cluster_event_get_stdout:
    summary: Get cluster event output
    tags: [lab]
    operationId: rhub.api.lab.cluster.get_cluster_event_stdout
    parameters:
      - $ref: '#/parameters/event_id'
    responses:
      '200':
        description: Event output
        content:
          text/plain:
            schema:
              type: string
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  cluster_hosts_list:
    summary: Get cluster hosts
    tags: [lab]
    operationId: rhub.api.lab.cluster.list_cluster_hosts
    parameters:
      - $ref: '#/parameters/cluster_id'
    responses:
      '200':
        description: Cluster hosts
        content:
          text/plain:
            schema:
              type: array
              items:
                $ref: '#/model/ClusterHost'
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  cluster_hosts_create:
    summary: Create or update cluster hosts
    tags: [lab]
    operationId: rhub.api.lab.cluster.create_cluster_hosts
    parameters:
      - $ref: '#/parameters/cluster_id'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              allOf:
                - $ref: '#/model/ClusterHost'
                - required:
                    - fqdn
                    - ipaddr
    responses:
      '200':
        description: Cluster hosts
        content:
          text/plain:
            schema:
              type: array
              items:
                $ref: '#/model/ClusterHost'
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  cluster_hosts_delete:
    summary: Delete cluster hosts
    tags: [lab]
    operationId: rhub.api.lab.cluster.delete_cluster_hosts
    parameters:
      - $ref: '#/parameters/cluster_id'
    responses:
      '204':
        description: Success
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []

  cluster_reboot:
    summary: Reboot cluster hosts
    description: |
      **Trigger** hosts reboot in OpenStack. You can soft or hard reboot a host.
      A soft reboot attempts a graceful shut down and restart of the host. A
      hard reboot power cycles the host.

      Only hosts that belong to the selected cluster can be rebooted, other
      hosts are silently ignored. A list of rebooted hosts is returned in the
      response body so you can verify which hosts will be rebooted.
    tags: [lab]
    operationId: rhub.api.lab.cluster.reboot_hosts
    parameters:
      - $ref: '#/parameters/cluster_id'
    requestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
                enum: [soft, hard]
                default: soft
              hosts:
                anyOf:
                  - type: string
                    enum: [all]
                  - type: array
                    items:
                      type: object
                      properties:
                        id:
                          $ref: 'common.yml#/model/ID'
                        fqdn:
                          type: string
          examples:
            all:
              summary: Reboot all cluster hosts
              value:
                hosts: all
            by_id:
              summary: Reboot cluster hosts by host ID
              value:
                hosts:
                  - id: 1
                  - id: 2
            by_fqdn:
              summary: Reboot cluster hosts by host FQDN
              value:
                hosts:
                  - fqdn: node-0.mycluster.example.com
                  - fqdn: node-1.mycluster.example.com
    responses:
      '200':
        description: List of rebooted hosts
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    $ref: 'common.yml#/model/ID'
                  fqdn:
                    type: string
      default:
        $ref: 'common.yml#/responses/problem'
    security:
      - oauth2: []
