openapi: '3.0.2'
info:
  title: Resource Hub
  version: '0.1'

servers:
  - url: /v0

components:
  schemas:
    ID:
      type: integer
      minimum: 1
    Name:
      type: string
      pattern: '^\w+$'

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string

    Quota:
      type: object
      properties:
        num_vcpus:
          type: integer
          minimum: 1
          nullable: true
        ram_mb:
          type: integer
          minimum: 1
          nullable: true
        num_volumes:
          type: integer
          minimum: 1
          nullable: true
        volumes_gb:
          type: integer
          minimum: 1
          nullable: true

    LabTower:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          $ref: '#/components/schemas/Name'
        description:
          type: string
        enabled:
          type: boolean
        hostname:
          type: string
          format: hostname
    LabRegion:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          $ref: '#/components/schemas/Name'
        description:
          type: string
        enabled:
          type: boolean
        reservations_enabled:
          type: boolean
        lifespans_enabled:
          type: boolean
        lifespans_length:
          type: integer
          minimum: 1
        shared:
          type: boolean
        quota_enabled:
          type: boolean
        quota:
          $ref: '#/components/schemas/Quota'
    LabCluster:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          $ref: '#/components/schemas/Name'
        description:
          type: string
        extra_vars:
          type: object
        user_id:
          $ref: '#/components/schemas/ID'
        region_id:
          $ref: '#/components/schemas/ID'
        template_id:
          $ref: '#/components/schemas/ID'
        reservation_expiration:
          type: number
          description: UNIX timestamp
        lifespan_expiration:
          type: number
          description: UNIX timestamp
    LabTemplate:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          $ref: '#/components/schemas/Name'
        description:
          type: string
        enabled:
          type: boolean
    LabBundle:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          $ref: '#/components/schemas/Name'
        description:
          type: string
        enabled:
          type: boolean
    User:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        login:
          type: string
        email:
          type: string
        name:
          type: string
    Group:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          type: string
        email:
          type: string
          description: Group mailing list
    AuthRole:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          type: string
    AuthToken:
      type: object
      properties:
        scope:
          type: array
          items:
            type: string
          readOnly: true

  parameters:
    lab_tower_id:
      name: id
      in: path
      description: ID of the tower
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    lab_region_id:
      name: id
      in: path
      description: ID of the region
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    lab_cluster_id:
      name: id
      in: path
      description: ID of the cluster
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    lab_template_id:
      name: id
      in: path
      description: ID of the template
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    lab_bundle_id:
      name: id
      in: path
      description: ID of the bundle
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    user_id:
      name: id
      in: path
      description: ID of the user
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    group_id:
      name: id
      in: path
      description: ID of the user
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    auth_role_id:
      name: id
      in: path
      description: ID of the auth role
      required: true
      schema:
        $ref: '#/components/schemas/ID'

  requestBodies:

    lab_tower_post:
      description: Tower
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/LabTower'
              - required:
                  - name
                  - hostname
    lab_tower_patch:
      description: Tower properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabTower'
    lab_region_post:
      description: Region
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/LabRegion'
              - required:
                  - name
    lab_region_patch:
      description: Region properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabRegion'
    lab_cluster_post:
      description: Cluster
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/LabCluster'
              - required:
                  - name
                  - user_id
                  - region_id
                  - template_id
    lab_cluster_patch:
      description: Cluster properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabCluster'
    lab_template_post:
      description: Template
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/LabTemplate'
              - required:
                  - name
    lab_template_patch:
      description: Template properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabTemplate'
    lab_template_id:
      description: Template ID
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: '#/components/schemas/ID'
    lab_bundle_post:
      description: Bundle
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/LabBundle'
              - required:
                  - name
    lab_bundle_patch:
      description: Bundle properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabBundle'
    lab_bundle_id:
      description: Bundle ID
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: '#/components/schemas/ID'
    user_post:
      description: User
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/User'
              - required:
                  - login
                  - email
    user_patch:
      description: User properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    group_post:
      description: Group
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/Group'
              - required:
                  - name
    group_patch:
      description: Group properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Group'
    group_id:
      description: Group ID
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: '#/components/schemas/ID'
    auth_role_post:
      description: Auth role
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/AuthRole'
              - required:
                  - name
    auth_role_patch:
      description: Auth role properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthRole'
    auth_role_id:
      description: Auth role ID
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: '#/components/schemas/ID'

  responses:

    error:
      description: Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
        '*/*': {}
    invalid_request:
      description: Invalid request error (eg. missing required fields, integrity constraint violation).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    lab_tower_get:
      description: Tower
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabTower'
    lab_tower_list:
      description: List of Tower
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LabTower'
    lab_region_get:
      description: Region
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabRegion'
    lab_region_list:
      description: List of Region
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LabRegion'
    lab_cluster_get:
      description: Cluster
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabCluster'
    lab_cluster_list:
      description: List of Cluster
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LabCluster'
    lab_template_get:
      description: Template
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabTemplate'
    lab_template_list:
      description: List of Template
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LabTemplate'
    lab_bundle_get:
      description: Bundle
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabBundle'
    lab_bundle_list:
      description: List of Bundle
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LabBundle'
    user_get:
      description: User
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    user_list:
      description: List of User
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
    group_get:
      description: Group
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Group'
    group_list:
      description: List of Group
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Group'
    auth_role_get:
      description: Auth role
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthRole'
    auth_role_list:
      description: List of Auth role
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AuthRole'
    auth_token_get:
      description: Auth token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthToken'

tags:
  - name: lab
    description: Clusters for testing purposes.
  - name: auth
    description: Authentication related functions.

paths:
  /cowsay:
    get:
      summary: Most important endpoint!
      tags: [health]
      operationId: rhub.api.health.cowsay
      responses:
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
  /ping:
    get:
      summary: Basic availablity endpoint
      tags: [health]
      operationId: rhub.api.health.ping
      responses:
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                enum: [pong]

  /lab/tower:
    get:
      summary: Get tower list
      tags: [lab]
      operationId: rhub.api.lab.tower.list_towers
      responses:
        200:
          $ref: '#/components/responses/lab_tower_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Create tower
      tags: [lab]
      operationId: rhub.api.lab.tower.create_tower
      requestBody:
        $ref: '#/components/requestBodies/lab_tower_post'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
  /lab/tower/{id}:
    get:
      summary: Get tower
      tags: [lab]
      operationId: rhub.api.lab.tower.get_tower
      parameters:
        - $ref: '#/components/parameters/lab_tower_id'
      responses:
        200:
          $ref: '#/components/responses/lab_tower_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/error'
    patch:
      summary: Update tower
      tags: [lab]
      operationId: rhub.api.lab.tower.update_tower
      parameters:
        - $ref: '#/components/parameters/lab_tower_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_tower_patch'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Delete tower
      tags: [lab]
      operationId: rhub.api.lab.tower.delete_tower
      parameters:
        - $ref: '#/components/parameters/lab_tower_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /lab/region:
    get:
      summary: Get region list
      tags: [lab]
      operationId: rhub.api.lab.region.list_regions
      responses:
        200:
          $ref: '#/components/responses/lab_region_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Create region
      tags: [lab]
      operationId: rhub.api.lab.region.create_region
      requestBody:
        $ref: '#/components/requestBodies/lab_region_post'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
  /lab/region/{id}:
    get:
      summary: Get region
      tags: [lab]
      operationId: rhub.api.lab.region.get_region
      parameters:
        - $ref: '#/components/parameters/lab_region_id'
      responses:
        200:
          $ref: '#/components/responses/lab_region_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/error'
    patch:
      summary: Update region
      tags: [lab]
      operationId: rhub.api.lab.region.update_region
      parameters:
        - $ref: '#/components/parameters/lab_region_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_region_patch'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Delete region
      tags: [lab]
      operationId: rhub.api.lab.region.delete_region
      parameters:
        - $ref: '#/components/parameters/lab_region_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /lab/region/{id}/templates:
    get:
      summary: Get templates available on region
      tags: [lab]
      operationId: rhub.api.lab.region.list_region_templates
      parameters:
        - $ref: '#/components/parameters/lab_region_id'
      responses:
        200:
          $ref: '#/components/responses/lab_template_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Add template to region
      tags: [lab]
      operationId: rhub.api.lab.region.add_region_template
      parameters:
        - $ref: '#/components/parameters/lab_region_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_template_id'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Remove template from region
      tags: [lab]
      operationId: rhub.api.lab.region.delete_region_template
      parameters:
        - $ref: '#/components/parameters/lab_region_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_template_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /lab/template:
    get:
      summary: Get template list
      tags: [lab]
      operationId: rhub.api.lab.template.list_templates
      responses:
        200:
          $ref: '#/components/responses/lab_template_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Create template
      tags: [lab]
      operationId: rhub.api.lab.template.create_template
      requestBody:
        $ref: '#/components/requestBodies/lab_template_post'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
  /lab/template/{id}:
    get:
      summary: Get template
      tags: [lab]
      operationId: rhub.api.lab.template.get_template
      parameters:
        - $ref: '#/components/parameters/lab_template_id'
      responses:
        200:
          $ref: '#/components/responses/lab_template_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/error'
    patch:
      summary: Update template
      tags: [lab]
      operationId: rhub.api.lab.template.update_template
      parameters:
        - $ref: '#/components/parameters/lab_template_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_template_patch'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Delete template
      tags: [lab]
      operationId: rhub.api.lab.template.delete_template
      parameters:
        - $ref: '#/components/parameters/lab_template_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /lab/template/{id}/bundles:
    get:
      summary: Get bundles available for template
      tags: [lab]
      operationId: rhub.api.lab.template.list_template_bundles
      parameters:
        - $ref: '#/components/parameters/lab_template_id'
      responses:
        200:
          $ref: '#/components/responses/lab_bundle_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Add bundle to template
      tags: [lab]
      operationId: rhub.api.lab.template.add_template_bundle
      parameters:
        - $ref: '#/components/parameters/lab_template_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_bundle_id'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Remove bundle from template
      tags: [lab]
      operationId: rhub.api.lab.template.delete_template_bundle
      parameters:
        - $ref: '#/components/parameters/lab_template_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_bundle_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /lab/bundle:
    get:
      summary: Get bundle list
      tags: [lab]
      operationId: rhub.api.lab.bundle.list_bundles
      responses:
        200:
          $ref: '#/components/responses/lab_bundle_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Create bundle
      tags: [lab]
      operationId: rhub.api.lab.bundle.create_bundle
      requestBody:
        $ref: '#/components/requestBodies/lab_bundle_post'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
  /lab/bundle/{id}:
    get:
      summary: Get bundle
      tags: [lab]
      operationId: rhub.api.lab.bundle.get_bundle
      parameters:
        - $ref: '#/components/parameters/lab_bundle_id'
      responses:
        200:
          $ref: '#/components/responses/lab_bundle_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/error'
    patch:
      summary: Update bundle
      tags: [lab]
      operationId: rhub.api.lab.bundle.update_bundle
      parameters:
        - $ref: '#/components/parameters/lab_bundle_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_bundle_patch'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Delete bundle
      tags: [lab]
      operationId: rhub.api.lab.bundle.delete_bundle
      parameters:
        - $ref: '#/components/parameters/lab_bundle_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /lab/cluster:
    get:
      summary: Get cluster list
      tags: [lab]
      operationId: rhub.api.lab.cluster.list_clusters
      responses:
        200:
          $ref: '#/components/responses/lab_cluster_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Create cluster
      tags: [lab]
      operationId: rhub.api.lab.cluster.create_cluster
      requestBody:
        $ref: '#/components/requestBodies/lab_cluster_post'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
  /lab/cluster/{id}:
    get:
      summary: Get cluster
      tags: [lab]
      operationId: rhub.api.lab.cluster.get_cluster
      parameters:
        - $ref: '#/components/parameters/lab_cluster_id'
      responses:
        200:
          $ref: '#/components/responses/lab_cluster_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/error'
    patch:
      summary: Update cluster
      tags: [lab]
      operationId: rhub.api.lab.cluster.update_cluster
      parameters:
        - $ref: '#/components/parameters/lab_cluster_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_cluster_patch'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Delete cluster
      tags: [lab]
      operationId: rhub.api.lab.cluster.delete_cluster
      parameters:
        - $ref: '#/components/parameters/lab_cluster_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /auth/user:
    get:
      summary: Get user list
      tags: [auth]
      operationId: rhub.api.auth.user.list_users
      responses:
        200:
          $ref: '#/components/responses/user_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Create user
      tags: [auth]
      operationId: rhub.api.auth.user.create_user
      requestBody:
        $ref: '#/components/requestBodies/user_post'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
  /auth/user/{id}:
    get:
      summary: Get user
      tags: [auth]
      operationId: rhub.api.auth.user.get_user
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          $ref: '#/components/responses/user_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/error'
    patch:
      summary: Update user
      tags: [auth]
      operationId: rhub.api.auth.user.update_user
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        $ref: '#/components/requestBodies/user_patch'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Delete user
      tags: [auth]
      operationId: rhub.api.auth.user.delete_user
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /auth/user/{id}/groups:
    get:
      summary: Get user groups
      tags: [auth]
      operationId: rhub.api.auth.user.list_user_groups
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          $ref: '#/components/responses/group_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Add user to group
      tags: [auth]
      operationId: rhub.api.auth.user.add_user_group
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        $ref: '#/components/requestBodies/group_id'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Remove user from group
      tags: [auth]
      operationId: rhub.api.auth.user.delete_user_group
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        $ref: '#/components/requestBodies/group_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /auth/user/{id}/roles:
    get:
      summary: Get user roles
      tags: [auth]
      operationId: rhub.api.auth.user.list_user_roles
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          $ref: '#/components/responses/auth_role_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Add user to role
      tags: [auth]
      operationId: rhub.api.auth.user.add_user_role
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        $ref: '#/components/requestBodies/auth_role_id'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Remove user from role
      tags: [auth]
      operationId: rhub.api.auth.user.delete_user_role
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        $ref: '#/components/requestBodies/auth_role_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /auth/group:
    get:
      summary: Get group list
      tags: [auth]
      operationId: rhub.api.auth.group.list_groups
      responses:
        200:
          $ref: '#/components/responses/group_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Create group
      tags: [auth]
      operationId: rhub.api.auth.group.create_group
      requestBody:
        $ref: '#/components/requestBodies/group_post'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
  /auth/group/{id}:
    get:
      summary: Get group
      tags: [auth]
      operationId: rhub.api.auth.group.get_group
      parameters:
        - $ref: '#/components/parameters/group_id'
      responses:
        200:
          $ref: '#/components/responses/group_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/error'
    patch:
      summary: Update group
      tags: [auth]
      operationId: rhub.api.auth.group.update_group
      parameters:
        - $ref: '#/components/parameters/group_id'
      requestBody:
        $ref: '#/components/requestBodies/group_patch'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Delete group
      tags: [auth]
      operationId: rhub.api.auth.group.delete_group
      parameters:
        - $ref: '#/components/parameters/group_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /auth/group/{id}/users:
    get:
      summary: Get users in group
      tags: [auth]
      operationId: rhub.api.auth.group.list_group_users
      parameters:
        - $ref: '#/components/parameters/group_id'
      responses:
        200:
          $ref: '#/components/responses/group_list'
        default:
          $ref: '#/components/responses/error'
  /auth/group/{id}/roles:
    get:
      summary: Get group roles
      tags: [auth]
      operationId: rhub.api.auth.group.list_group_roles
      parameters:
        - $ref: '#/components/parameters/group_id'
      responses:
        200:
          $ref: '#/components/responses/auth_role_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Add group to role
      tags: [auth]
      operationId: rhub.api.auth.group.add_group_role
      parameters:
        - $ref: '#/components/parameters/group_id'
      requestBody:
        $ref: '#/components/requestBodies/auth_role_id'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Remove group from role
      tags: [auth]
      operationId: rhub.api.auth.group.delete_group_role
      parameters:
        - $ref: '#/components/parameters/group_id'
      requestBody:
        $ref: '#/components/requestBodies/auth_role_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /auth/role:
    get:
      summary: Get auth role list
      tags: [auth]
      operationId: rhub.api.auth.role.list_roles
      responses:
        200:
          $ref: '#/components/responses/auth_role_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Create auth role
      tags: [auth]
      operationId: rhub.api.auth.role.create_role
      requestBody:
        $ref: '#/components/requestBodies/auth_role_post'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
  /auth/role/{id}:
    get:
      summary: Get auth role
      tags: [auth]
      operationId: rhub.api.auth.role.get_role
      parameters:
        - $ref: '#/components/parameters/auth_role_id'
      responses:
        200:
          $ref: '#/components/responses/auth_role_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/error'
    patch:
      summary: Update auth role
      tags: [auth]
      operationId: rhub.api.auth.role.update_role
      parameters:
        - $ref: '#/components/parameters/auth_role_id'
      requestBody:
        $ref: '#/components/requestBodies/auth_role_patch'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Delete auth role
      tags: [auth]
      operationId: rhub.api.auth.role.delete_role
      parameters:
        - $ref: '#/components/parameters/auth_role_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /auth/token:
    get:
      summary: Get auth token info
      tags: [auth]
      operationId: rhub.api.auth.token.get_token_info
      responses:
        200:
          $ref: '#/components/responses/auth_token_get'
        default:
          $ref: '#/components/responses/error'
  /me:
    get:
      summary: Get info about logged in user
      tags: [auth]
      operationId: rhub.api.auth.user.get_current_user
      responses:
        200:
          $ref: '#/components/responses/user_get'
        default:
          $ref: '#/components/responses/error'
