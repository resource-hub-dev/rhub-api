openapi: '3.0.2'
info:
  title: Resource Hub
  version: '0.1'

servers:
  - url: /v0

components:
  schemas:
    ID:
      type: integer
      minimum: 1
    UUID:
      type: string
      format: uuid
    Name:
      type: string
      pattern: '^\w+$'

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string

    Quota:
      type: object
      properties:
        num_vcpus:
          type: integer
          minimum: 1
          nullable: true
        ram_mb:
          type: integer
          minimum: 1
          nullable: true
        num_volumes:
          type: integer
          minimum: 1
          nullable: true
        volumes_gb:
          type: integer
          minimum: 1
          nullable: true

    LabTower:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          $ref: '#/components/schemas/Name'
        description:
          type: string
        enabled:
          type: boolean
        hostname:
          type: string
          format: hostname
    LabRegion:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          $ref: '#/components/schemas/Name'
        description:
          type: string
        enabled:
          type: boolean
        reservations_enabled:
          type: boolean
        lifespans_enabled:
          type: boolean
        lifespans_length:
          type: integer
          minimum: 1
        shared:
          type: boolean
        quota_enabled:
          type: boolean
        quota:
          $ref: '#/components/schemas/Quota'
    LabCluster:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          $ref: '#/components/schemas/Name'
        description:
          type: string
        extra_vars:
          type: object
        user_id:
          $ref: '#/components/schemas/ID'
        region_id:
          $ref: '#/components/schemas/ID'
        template_id:
          $ref: '#/components/schemas/ID'
        reservation_expiration:
          type: number
          description: UNIX timestamp
        lifespan_expiration:
          type: number
          description: UNIX timestamp
    LabTemplate:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          $ref: '#/components/schemas/Name'
        description:
          type: string
        enabled:
          type: boolean
    LabBundle:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          $ref: '#/components/schemas/Name'
        description:
          type: string
        enabled:
          type: boolean
    User:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/UUID'
            - readOnly: true
        username:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        enabled:
          type: boolean
      description: |
        See [Keycloak API: UserRepresentation](
          https://www.keycloak.org/docs-api/11.0/rest-api/#_userrepresentation)
      example:
        access:
          impersonate: true
          manage: true
          manageGroupMembership: true
          mapRoles: true
          view: true
        createdTimestamp: 1614717256570
        disableableCredentialTypes: []
        email: testuser1@example.com
        emailVerified: false
        enabled: true
        firstName: test
        id: 743a5375-3513-4749-acb9-1cde1e159e3b
        lastName: user1
        notBefore: 0
        requiredActions: []
        totp: false
        username: testuser1
    Group:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/UUID'
            - readOnly: true
        name:
          type: string
        attributes:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Group attributes
      description: |
        See [Keycloak API: GroupRepresentation](
         https://www.keycloak.org/docs-api/11.0/rest-api/#_grouprepresentation)
      example:
        access:
          manage: true
          manageMembership: true
          view: true
        attributes:
          mailing-list:
            - admin-list@example.com
        clientRoles: {}
        id: fa831aa3-7a5a-4667-9c3f-bf20465058f6
        name: admin
        path: /admin
        realmRoles: []
        subGroups: []
    AuthRole:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          type: string
    AuthToken:
      type: object
      example:
        access_token: eyJhbGciOiJSUzI1...oJhA
        expires_in: 300
        not-before-policy: 0
        refresh_expires_in: 1800
        refresh_token: eyJhbGciOiJIUzI1...fc8A
        scope: profile email
        session_state: 82b7637e-69a2-41e1-ab0b-e3d6b6e1fb0a
        token_type: Bearer
    AuthTokenInfo:
      type: object
      description: |
        See [RFC 7662, Section 2.2](https://tools.ietf.org/html/rfc7662#section-2.2)
        and [Keycloak API: AccessToken](https://www.keycloak.org/docs-api/11.0/rest-api/#_accesstoken)
      example:
        acr: '1'
        active: true
        allowed-origins:
          - http://localhost:8080
        aud: account
        azp: rhub-app
        client_id: rhub-app
        email: testuser1@example.com
        email_verified: false
        exp: 1617791654
        family_name: user1
        given_name: test
        iat: 1617791354
        iss: http://localhost:8082/auth/realms/rhub
        jti: 640eb3a2-a193-4998-aa5b-5f0ba5beb154
        name: test user1
        preferred_username: testuser1
        realm_access:
          roles:
            - offline_access
            - uma_authorization
        resource_access:
          account:
            roles:
              - manage-account
              - manage-account-links
              - view-profile
        scope: profile email
        session_state: 82b7637e-69a2-41e1-ab0b-e3d6b6e1fb0a
        sub: 743a5375-3513-4749-acb9-1cde1e159e3b
        typ: Bearer
        username: testuser1

  parameters:
    lab_tower_id:
      name: id
      in: path
      description: ID of the tower
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    lab_region_id:
      name: id
      in: path
      description: ID of the region
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    lab_cluster_id:
      name: id
      in: path
      description: ID of the cluster
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    lab_template_id:
      name: id
      in: path
      description: ID of the template
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    lab_bundle_id:
      name: id
      in: path
      description: ID of the bundle
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    user_id:
      name: id
      in: path
      description: ID of the user
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
    group_id:
      name: id
      in: path
      description: ID of the user
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
    auth_role_id:
      name: id
      in: path
      description: ID of the auth role
      required: true
      schema:
        $ref: '#/components/schemas/UUID'

  requestBodies:

    lab_tower_post:
      description: Tower
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/LabTower'
              - required:
                  - name
                  - hostname
    lab_tower_patch:
      description: Tower properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabTower'
    lab_region_post:
      description: Region
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/LabRegion'
              - required:
                  - name
    lab_region_patch:
      description: Region properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabRegion'
    lab_cluster_post:
      description: Cluster
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/LabCluster'
              - required:
                  - name
                  - user_id
                  - region_id
                  - template_id
    lab_cluster_patch:
      description: Cluster properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabCluster'
    lab_template_post:
      description: Template
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/LabTemplate'
              - required:
                  - name
    lab_template_patch:
      description: Template properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabTemplate'
    lab_template_id:
      description: Template ID
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: '#/components/schemas/ID'
    lab_bundle_post:
      description: Bundle
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/LabBundle'
              - required:
                  - name
    lab_bundle_patch:
      description: Bundle properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabBundle'
    lab_bundle_id:
      description: Bundle ID
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: '#/components/schemas/ID'
    user_post:
      description: User
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/User'
              - required:
                  - username
                  - email
          example:
            username: alice
            email: alice@example.com
            firstName: Alice
            lastName: Example
            password: p4ssw0rd
    user_patch:
      description: User properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          example:
            email: alice-new@example.com
            lastName: New
    group_post:
      description: Group
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/Group'
              - required:
                  - name
          example:
            name: admin
            attributes:
              mailing-list:
                - admin-list@example.com
    group_patch:
      description: Group properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Group'
          example:
            attributes:
              mailing-list:
                - admin-list@example.com
    group_id:
      description: Group ID
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: '#/components/schemas/UUID'
    auth_role_post:
      description: Auth role
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/AuthRole'
              - required:
                  - name
    auth_role_patch:
      description: Auth role properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthRole'
    auth_role_id:
      description: Auth role ID
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: '#/components/schemas/UUID'

  responses:

    error:
      description: Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
        '*/*': {}
    invalid_request:
      description: Invalid request error (eg. missing required fields, integrity constraint violation).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    lab_tower_get:
      description: Tower
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabTower'
    lab_tower_list:
      description: List of Tower
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LabTower'
    lab_region_get:
      description: Region
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabRegion'
    lab_region_list:
      description: List of Region
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LabRegion'
    lab_cluster_get:
      description: Cluster
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabCluster'
    lab_cluster_list:
      description: List of Cluster
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LabCluster'
    lab_template_get:
      description: Template
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabTemplate'
    lab_template_list:
      description: List of Template
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LabTemplate'
    lab_bundle_get:
      description: Bundle
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabBundle'
    lab_bundle_list:
      description: List of Bundle
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LabBundle'
    user_get:
      description: User
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    user_list:
      description: List of User
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
    group_get:
      description: Group
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Group'
    group_list:
      description: List of Group
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Group'
          example:
            - id: fa831aa3-7a5a-4667-9c3f-bf20465058f6
              name: admin
              path: /admin
              subGroups: []
    auth_role_get:
      description: Auth role
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthRole'
    auth_role_list:
      description: List of Auth role
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/AuthRole'
    auth_token:
      description: Auth token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthToken'
    auth_token_info:
      description: Auth token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthTokenInfo'

  securitySchemes:
    basic:
      type: http
      scheme: basic
      x-basicInfoFunc: rhub.api.auth.token.basic_auth
    oauth2:
      type: http
      scheme: bearer
      bearerFormat: Bearer
      x-bearerInfoFunc: rhub.api.auth.token.decode_token
      x-tokenInfoFunc: rhub.api.auth.token.get_token_info

tags:
  - name: lab
    description: Clusters for testing purposes.
  - name: auth
    description: Authentication related functions.

paths:
  /cowsay:
    get:
      summary: Most important endpoint!
      tags: [health]
      operationId: rhub.api.health.cowsay
      responses:
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
  /ping:
    get:
      summary: Basic availablity endpoint
      tags: [health]
      operationId: rhub.api.health.ping
      responses:
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                enum: [pong]

  /lab/tower:
    get:
      summary: Get tower list
      tags: [lab]
      operationId: rhub.api.lab.tower.list_towers
      responses:
        200:
          $ref: '#/components/responses/lab_tower_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Create tower
      tags: [lab]
      operationId: rhub.api.lab.tower.create_tower
      requestBody:
        $ref: '#/components/requestBodies/lab_tower_post'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
  /lab/tower/{id}:
    get:
      summary: Get tower
      tags: [lab]
      operationId: rhub.api.lab.tower.get_tower
      parameters:
        - $ref: '#/components/parameters/lab_tower_id'
      responses:
        200:
          $ref: '#/components/responses/lab_tower_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/error'
    patch:
      summary: Update tower
      tags: [lab]
      operationId: rhub.api.lab.tower.update_tower
      parameters:
        - $ref: '#/components/parameters/lab_tower_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_tower_patch'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Delete tower
      tags: [lab]
      operationId: rhub.api.lab.tower.delete_tower
      parameters:
        - $ref: '#/components/parameters/lab_tower_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /lab/region:
    get:
      summary: Get region list
      tags: [lab]
      operationId: rhub.api.lab.region.list_regions
      responses:
        200:
          $ref: '#/components/responses/lab_region_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Create region
      tags: [lab]
      operationId: rhub.api.lab.region.create_region
      requestBody:
        $ref: '#/components/requestBodies/lab_region_post'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
  /lab/region/{id}:
    get:
      summary: Get region
      tags: [lab]
      operationId: rhub.api.lab.region.get_region
      parameters:
        - $ref: '#/components/parameters/lab_region_id'
      responses:
        200:
          $ref: '#/components/responses/lab_region_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/error'
    patch:
      summary: Update region
      tags: [lab]
      operationId: rhub.api.lab.region.update_region
      parameters:
        - $ref: '#/components/parameters/lab_region_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_region_patch'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Delete region
      tags: [lab]
      operationId: rhub.api.lab.region.delete_region
      parameters:
        - $ref: '#/components/parameters/lab_region_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /lab/region/{id}/templates:
    get:
      summary: Get templates available on region
      tags: [lab]
      operationId: rhub.api.lab.region.list_region_templates
      parameters:
        - $ref: '#/components/parameters/lab_region_id'
      responses:
        200:
          $ref: '#/components/responses/lab_template_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Add template to region
      tags: [lab]
      operationId: rhub.api.lab.region.add_region_template
      parameters:
        - $ref: '#/components/parameters/lab_region_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_template_id'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Remove template from region
      tags: [lab]
      operationId: rhub.api.lab.region.delete_region_template
      parameters:
        - $ref: '#/components/parameters/lab_region_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_template_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /lab/template:
    get:
      summary: Get template list
      tags: [lab]
      operationId: rhub.api.lab.template.list_templates
      responses:
        200:
          $ref: '#/components/responses/lab_template_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Create template
      tags: [lab]
      operationId: rhub.api.lab.template.create_template
      requestBody:
        $ref: '#/components/requestBodies/lab_template_post'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
  /lab/template/{id}:
    get:
      summary: Get template
      tags: [lab]
      operationId: rhub.api.lab.template.get_template
      parameters:
        - $ref: '#/components/parameters/lab_template_id'
      responses:
        200:
          $ref: '#/components/responses/lab_template_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/error'
    patch:
      summary: Update template
      tags: [lab]
      operationId: rhub.api.lab.template.update_template
      parameters:
        - $ref: '#/components/parameters/lab_template_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_template_patch'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Delete template
      tags: [lab]
      operationId: rhub.api.lab.template.delete_template
      parameters:
        - $ref: '#/components/parameters/lab_template_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /lab/template/{id}/bundles:
    get:
      summary: Get bundles available for template
      tags: [lab]
      operationId: rhub.api.lab.template.list_template_bundles
      parameters:
        - $ref: '#/components/parameters/lab_template_id'
      responses:
        200:
          $ref: '#/components/responses/lab_bundle_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Add bundle to template
      tags: [lab]
      operationId: rhub.api.lab.template.add_template_bundle
      parameters:
        - $ref: '#/components/parameters/lab_template_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_bundle_id'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Remove bundle from template
      tags: [lab]
      operationId: rhub.api.lab.template.delete_template_bundle
      parameters:
        - $ref: '#/components/parameters/lab_template_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_bundle_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /lab/bundle:
    get:
      summary: Get bundle list
      tags: [lab]
      operationId: rhub.api.lab.bundle.list_bundles
      responses:
        200:
          $ref: '#/components/responses/lab_bundle_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Create bundle
      tags: [lab]
      operationId: rhub.api.lab.bundle.create_bundle
      requestBody:
        $ref: '#/components/requestBodies/lab_bundle_post'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
  /lab/bundle/{id}:
    get:
      summary: Get bundle
      tags: [lab]
      operationId: rhub.api.lab.bundle.get_bundle
      parameters:
        - $ref: '#/components/parameters/lab_bundle_id'
      responses:
        200:
          $ref: '#/components/responses/lab_bundle_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/error'
    patch:
      summary: Update bundle
      tags: [lab]
      operationId: rhub.api.lab.bundle.update_bundle
      parameters:
        - $ref: '#/components/parameters/lab_bundle_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_bundle_patch'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Delete bundle
      tags: [lab]
      operationId: rhub.api.lab.bundle.delete_bundle
      parameters:
        - $ref: '#/components/parameters/lab_bundle_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /lab/cluster:
    get:
      summary: Get cluster list
      tags: [lab]
      operationId: rhub.api.lab.cluster.list_clusters
      responses:
        200:
          $ref: '#/components/responses/lab_cluster_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Create cluster
      tags: [lab]
      operationId: rhub.api.lab.cluster.create_cluster
      requestBody:
        $ref: '#/components/requestBodies/lab_cluster_post'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
  /lab/cluster/{id}:
    get:
      summary: Get cluster
      tags: [lab]
      operationId: rhub.api.lab.cluster.get_cluster
      parameters:
        - $ref: '#/components/parameters/lab_cluster_id'
      responses:
        200:
          $ref: '#/components/responses/lab_cluster_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/error'
    patch:
      summary: Update cluster
      tags: [lab]
      operationId: rhub.api.lab.cluster.update_cluster
      parameters:
        - $ref: '#/components/parameters/lab_cluster_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_cluster_patch'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Delete cluster
      tags: [lab]
      operationId: rhub.api.lab.cluster.delete_cluster
      parameters:
        - $ref: '#/components/parameters/lab_cluster_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /auth/user:
    get:
      summary: Get user list
      description: |
        See also [Keycloak API: UserRepresentation](
          https://www.keycloak.org/docs-api/11.0/rest-api/#_userrepresentation)
      tags: [auth]
      operationId: rhub.api.auth.user.list_users
      responses:
        200:
          $ref: '#/components/responses/user_list'
        default:
          $ref: '#/components/responses/error'
      security:
        - oauth2: []
    post:
      summary: Create user
      description: |
        Create a user in the database. Returns created user data with extra
        fields added by auth database (UUID and other fields).

        See also [Keycloak API: UserRepresentation](
          https://www.keycloak.org/docs-api/11.0/rest-api/#_userrepresentation)
      tags: [auth]
      operationId: rhub.api.auth.user.create_user
      requestBody:
        $ref: '#/components/requestBodies/user_post'
      responses:
        200:
          description: User successfully created
          $ref: '#/components/responses/user_get'
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
      security:
        - oauth2: []
  /auth/user/{id}:
    get:
      summary: Get user
      description: |
        Returns user data including extra fields added by auth database. Data
        object contains at least properties that are in the schema but also
        database internal data like `createdTimestamp` and others.

        See also [Keycloak API: UserRepresentation](
          https://www.keycloak.org/docs-api/11.0/rest-api/#_userrepresentation)
      tags: [auth]
      operationId: rhub.api.auth.user.get_user
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          $ref: '#/components/responses/user_get'
        404:
          description: User not found
        default:
          $ref: '#/components/responses/error'
      security:
        - oauth2: []
    patch:
      summary: Update user
      description: |
        Update user in the database. Returns updated user data including extra
        fields added by auth database.

        See also [Keycloak API: UserRepresentation](
          https://www.keycloak.org/docs-api/11.0/rest-api/#_userrepresentation)
      tags: [auth]
      operationId: rhub.api.auth.user.update_user
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        $ref: '#/components/requestBodies/user_patch'
      responses:
        200:
          description: User successfully updated
          $ref: '#/components/responses/user_get'
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
      security:
        - oauth2: []
    delete:
      summary: Delete user
      tags: [auth]
      operationId: rhub.api.auth.user.delete_user
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: User successfully deleted
        default:
          $ref: '#/components/responses/error'
      security:
        - oauth2: []
  /auth/user/{id}/groups:
    get:
      summary: Get user groups
      description: |
        See also [Keycloak API: GroupRepresentation](
         https://www.keycloak.org/docs-api/11.0/rest-api/#_grouprepresentation)
      tags: [auth]
      operationId: rhub.api.auth.user.list_user_groups
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          $ref: '#/components/responses/group_list'
        default:
          $ref: '#/components/responses/error'
      security:
        - oauth2: []
    post:
      summary: Add user to group
      tags: [auth]
      operationId: rhub.api.auth.user.add_user_group
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        $ref: '#/components/requestBodies/group_id'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
      security:
        - oauth2: []
    delete:
      summary: Remove user from group
      tags: [auth]
      operationId: rhub.api.auth.user.delete_user_group
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        $ref: '#/components/requestBodies/group_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
      security:
        - oauth2: []
  /auth/user/{id}/roles:
    get:
      summary: Get user roles
      tags: [auth]
      operationId: rhub.api.auth.user.list_user_roles
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          $ref: '#/components/responses/auth_role_list'
        default:
          $ref: '#/components/responses/error'
      security:
        - oauth2: []
    post:
      summary: Add user to role
      tags: [auth]
      operationId: rhub.api.auth.user.add_user_role
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        $ref: '#/components/requestBodies/auth_role_id'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
      security:
        - oauth2: []
    delete:
      summary: Remove user from role
      tags: [auth]
      operationId: rhub.api.auth.user.delete_user_role
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        $ref: '#/components/requestBodies/auth_role_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
      security:
        - oauth2: []
  /auth/group:
    get:
      summary: Get group list
      description: |
        See also [Keycloak API: GroupRepresentation](
         https://www.keycloak.org/docs-api/11.0/rest-api/#_grouprepresentation)
      tags: [auth]
      operationId: rhub.api.auth.group.list_groups
      responses:
        200:
          $ref: '#/components/responses/group_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Create group
      description: |
        Create a group in the database. Returns created group data with extra
        fields added by auth database (UUID and other fields).

        See also [Keycloak API: GroupRepresentation](
         https://www.keycloak.org/docs-api/11.0/rest-api/#_grouprepresentation)
      tags: [auth]
      operationId: rhub.api.auth.group.create_group
      requestBody:
        $ref: '#/components/requestBodies/group_post'
      responses:
        200:
          description: Success
          $ref: '#/components/responses/group_get'
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
  /auth/group/{id}:
    get:
      summary: Get group
      description: |
        Returns group data including extra fields added by auth database. Data
        object contains at least properties that are in the schema but also
        database internal data like `subGroups` and others.

        See also [Keycloak API: GroupRepresentation](
         https://www.keycloak.org/docs-api/11.0/rest-api/#_grouprepresentation)
      tags: [auth]
      operationId: rhub.api.auth.group.get_group
      parameters:
        - $ref: '#/components/parameters/group_id'
      responses:
        200:
          $ref: '#/components/responses/group_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/error'
    patch:
      summary: Update group
      description: |
        Update group in the database. Returns updated group data including extra
        fields added by auth database.

        See also [Keycloak API: GroupRepresentation](
         https://www.keycloak.org/docs-api/11.0/rest-api/#_grouprepresentation)
      tags: [auth]
      operationId: rhub.api.auth.group.update_group
      parameters:
        - $ref: '#/components/parameters/group_id'
      requestBody:
        $ref: '#/components/requestBodies/group_patch'
      responses:
        200:
          description: Success
          $ref: '#/components/responses/group_get'
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Delete group
      tags: [auth]
      operationId: rhub.api.auth.group.delete_group
      parameters:
        - $ref: '#/components/parameters/group_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /auth/group/{id}/users:
    get:
      summary: Get users in group
      description: |
        See also [Keycloak API: UserRepresentation](
          https://www.keycloak.org/docs-api/11.0/rest-api/#_userrepresentation)
      tags: [auth]
      operationId: rhub.api.auth.group.list_group_users
      parameters:
        - $ref: '#/components/parameters/group_id'
      responses:
        200:
          $ref: '#/components/responses/user_list'
        default:
          $ref: '#/components/responses/error'
  /auth/group/{id}/roles:
    get:
      summary: Get group roles
      tags: [auth]
      operationId: rhub.api.auth.group.list_group_roles
      parameters:
        - $ref: '#/components/parameters/group_id'
      responses:
        200:
          $ref: '#/components/responses/auth_role_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Add group to role
      tags: [auth]
      operationId: rhub.api.auth.group.add_group_role
      parameters:
        - $ref: '#/components/parameters/group_id'
      requestBody:
        $ref: '#/components/requestBodies/auth_role_id'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Remove group from role
      tags: [auth]
      operationId: rhub.api.auth.group.delete_group_role
      parameters:
        - $ref: '#/components/parameters/group_id'
      requestBody:
        $ref: '#/components/requestBodies/auth_role_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /auth/role:
    get:
      summary: Get auth role list
      tags: [auth]
      operationId: rhub.api.auth.role.list_roles
      responses:
        200:
          $ref: '#/components/responses/auth_role_list'
        default:
          $ref: '#/components/responses/error'
    post:
      summary: Create auth role
      tags: [auth]
      operationId: rhub.api.auth.role.create_role
      requestBody:
        $ref: '#/components/requestBodies/auth_role_post'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
  /auth/role/{id}:
    get:
      summary: Get auth role
      tags: [auth]
      operationId: rhub.api.auth.role.get_role
      parameters:
        - $ref: '#/components/parameters/auth_role_id'
      responses:
        200:
          $ref: '#/components/responses/auth_role_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/error'
    patch:
      summary: Update auth role
      tags: [auth]
      operationId: rhub.api.auth.role.update_role
      parameters:
        - $ref: '#/components/parameters/auth_role_id'
      requestBody:
        $ref: '#/components/requestBodies/auth_role_patch'
      responses:
        200:
          description: Success
        400:
          $ref: '#/components/responses/invalid_request'
        default:
          $ref: '#/components/responses/error'
    delete:
      summary: Delete auth role
      tags: [auth]
      operationId: rhub.api.auth.role.delete_role
      parameters:
        - $ref: '#/components/parameters/auth_role_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/error'
  /auth/token:
    get:
      summary: Get auth token info
      tags: [auth]
      operationId: rhub.api.auth.token.get_token_info
      responses:
        200:
          $ref: '#/components/responses/auth_token_info'
        default:
          $ref: '#/components/responses/error'
      security:
        - oauth2: []
  /auth/token/create:
    post:
      summary: Login and get access token
      description: |
        This endpoint requires HTTP basic authentication. If credentials are
        correct then it returns oauth2 token info - access token, refresh token
        and some other informations about generated token.
      tags: [auth]
      operationId: rhub.api.auth.token.create_token
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            example: Basic dXNlcm5hbWU6cGFzc3dvcmQ=
          required: true
      responses:
        200:
          $ref: '#/components/responses/auth_token'
        default:
          $ref: '#/components/responses/error'
  /auth/token/refresh:
    post:
      summary: Refresh token
      description: |
        This endpoint requires HTTP bearer authentication. The bearer token in
        'Authorization' header is not access token but refresh token. If refresh
        was successful return new oauth2 token info. Response is the same as
        from token create endpoint.
      tags: [auth]
      operationId: rhub.api.auth.token.refresh_token
      parameters:
        - in: header
          name: Authorization
          description: Bearer token is refresh token, not access token!
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1...VLzc
          required: true
      responses:
        200:
          $ref: '#/components/responses/auth_token'
        default:
          $ref: '#/components/responses/error'
  /me:
    get:
      summary: Get info about logged in user
      tags: [auth]
      operationId: rhub.api.auth.user.get_current_user
      responses:
        200:
          $ref: '#/components/responses/user_get'
        default:
          $ref: '#/components/responses/error'
      security:
        - oauth2: []
