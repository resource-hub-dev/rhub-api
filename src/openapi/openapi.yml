openapi: '3.0.2'
info:
  title: Resource Hub
  version: '0.1'

servers:
  - url: /v0

components:
  schemas:
    ID:
      type: integer
      minimum: 1
    UUID:
      type: string
      format: uuid
    Name:
      type: string
      pattern: '^\w+$'

    Quota:
      type: object
      properties:
        num_vcpus:
          type: integer
          minimum: 1
          nullable: true
        ram_mb:
          type: integer
          minimum: 1
          nullable: true
        num_volumes:
          type: integer
          minimum: 1
          nullable: true
        volumes_gb:
          type: integer
          minimum: 1
          nullable: true

    LabTower:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          $ref: '#/components/schemas/Name'
        description:
          type: string
        enabled:
          type: boolean
        url:
          type: string
          format: url
        credentials:
          type: string
          description: Tower credentials path (Vault mount/path)
    LabRegion:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          type: string
          maxLength: 32
        location:
          description: Geographical location of region.
          type: string
          maxLength: 32
          nullable: true
        description:
          type: string
        banner:
          type: string
        enabled:
          type: boolean
        reservations_enabled:
          type: boolean
        lifespan_length:
          type: integer
          minimum: 1
          nullable: true
        quota:
          anyOf:
            - $ref: '#/components/schemas/Quota'
            - nullable: true
        owner_group:
          type: string
          format: uuid
          readOnly: true
        users_group:
          type: string
          format: uuid
          nullable: true
        tower_id:
          $ref: '#/components/schemas/ID'
      example:
        id: 1
        name: rdu2-a
        location: RDU
        description: ''
        banner: ''
        enabled: true
        reservation_enabled: true
        lifespan_length: 60
        quota:
          num_vcpus: 40
          ram_mb: 200000
          num_volumes: 40
          volumes_gb: 540
        owner_group: 7670ac07-cb21-448d-af8a-6e3882216be3
        users_group: null
        tower_id: 1
    LabCluster:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          $ref: '#/components/schemas/Name'
        description:
          type: string
        extra_vars:
          type: object
        user_id:
          $ref: '#/components/schemas/ID'
        region_id:
          $ref: '#/components/schemas/ID'
        template_id:
          $ref: '#/components/schemas/ID'
        reservation_expiration:
          type: string
          format: date-time
          description: Soft-limit expiration.
        lifespan_expiration:
          type: string
          format: date-time
          readOnly: true
          description: Hard-limit expiration.
    LabTemplate:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          $ref: '#/components/schemas/Name'
        description:
          type: string
        enabled:
          type: boolean
    LabBundle:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          $ref: '#/components/schemas/Name'
        description:
          type: string
        enabled:
          type: boolean
    User:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/UUID'
            - readOnly: true
        username:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        enabled:
          type: boolean
      description: |
        See [Keycloak API: UserRepresentation](
          https://www.keycloak.org/docs-api/11.0/rest-api/#_userrepresentation)
      example:
        access:
          impersonate: true
          manage: true
          manageGroupMembership: true
          mapRoles: true
          view: true
        createdTimestamp: 1614717256570
        disableableCredentialTypes: []
        email: testuser1@example.com
        emailVerified: false
        enabled: true
        firstName: test
        id: 743a5375-3513-4749-acb9-1cde1e159e3b
        lastName: user1
        notBefore: 0
        requiredActions: []
        totp: false
        username: testuser1
    Group:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/UUID'
            - readOnly: true
        name:
          type: string
        attributes:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Group attributes
      description: |
        See [Keycloak API: GroupRepresentation](
         https://www.keycloak.org/docs-api/11.0/rest-api/#_grouprepresentation)
      example:
        access:
          manage: true
          manageMembership: true
          view: true
        attributes:
          mailing-list:
            - admin-list@example.com
        clientRoles: {}
        id: fa831aa3-7a5a-4667-9c3f-bf20465058f6
        name: admin
        path: /admin
        realmRoles: []
        subGroups: []
    Role:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/UUID'
            - readOnly: true
        name:
          type: string
        attributes:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
          description: Role attributes
      description: |
        See [Keycloak API: RoleRepresentation](
         https://www.keycloak.org/docs-api/11.0/rest-api/#_rolerepresentation)
      example:
        attributes: {}
        id: fa831aa3-7a5a-4667-9c3f-bf20465058f6
        name: admin
        clientRole: false
        composite: false
        composites: {}
        containerId: admin
        description: adminRole
    AuthToken:
      type: object
      example:
        access_token: eyJhbGciOiJSUzI1...oJhA
        expires_in: 300
        not-before-policy: 0
        refresh_expires_in: 1800
        refresh_token: eyJhbGciOiJIUzI1...fc8A
        scope: profile email
        session_state: 82b7637e-69a2-41e1-ab0b-e3d6b6e1fb0a
        token_type: Bearer
    AuthTokenInfo:
      type: object
      description: |
        See [RFC 7662, Section 2.2](https://tools.ietf.org/html/rfc7662#section-2.2)
        and [Keycloak API: AccessToken](https://www.keycloak.org/docs-api/11.0/rest-api/#_accesstoken)
      example:
        acr: '1'
        active: true
        allowed-origins:
          - http://localhost:8080
        aud: account
        azp: rhub-app
        client_id: rhub-app
        email: testuser1@example.com
        email_verified: false
        exp: 1617791654
        family_name: user1
        given_name: test
        iat: 1617791354
        iss: http://localhost:8082/auth/realms/rhub
        jti: 640eb3a2-a193-4998-aa5b-5f0ba5beb154
        name: test user1
        preferred_username: testuser1
        realm_access:
          roles:
            - offline_access
            - uma_authorization
        resource_access:
          account:
            roles:
              - manage-account
              - manage-account-links
              - view-profile
        scope: profile email
        session_state: 82b7637e-69a2-41e1-ab0b-e3d6b6e1fb0a
        sub: 743a5375-3513-4749-acb9-1cde1e159e3b
        typ: Bearer
        username: testuser1
    TowerServer:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          $ref: '#/components/schemas/Name'
        description:
          type: string
        enabled:
          type: boolean
        url:
          type: string
          format: url
        credentials:
          type: string
          description: Tower credentials path (Vault mount/path)
    TowerTemplate:
      type: object
      properties:
        id:
          description: Internal ID
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          type: string
        description:
          type: string
        server_id:
          description: Reference to TowerServer (TowerServer.id)
          $ref: '#/components/schemas/ID'
        tower_template_id:
          description: ID of template in remote Tower
          $ref: '#/components/schemas/ID'
        tower_template_is_workflow:
          description: Is template workflow?
          type: boolean
    TowerJob:
      type: object
      properties:
        id:
          description: Internal ID
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        template_id:
          description: Reference to TowerTemplate (TowerTemplate.id)
          $ref: '#/components/schemas/ID'
        tower_job_id:
          description: ID of job in remote Tower
          $ref: '#/components/schemas/ID'
        launched_by:
          description: UUID of user who launched job
          $ref: '#/components/schemas/UUID'
        status:
          description: Job status
          type: string
        created_at:
          type: string
          format: date-time
        started:
          type: boolean
        started_at:
          type: string
          format: date-time
          x-nullable: true
        finished:
          type: boolean
        finished_at:
          type: string
          format: date-time
          x-nullable: true
        failed:
          type: boolean
    Policy:
      type: object
      properties:
        id:
          description: Internal ID
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          description: Name
          type: string
        department:
          description: Department Name
          type: string
        constraint:
          type: object
          properties:
            sched_avail:
              type: array
              items:
                type: string
                format: date-time
              maxItems: 2
            serv_avail:
              type: number
            consumption:
              type: string
            density:
              type: string
            attribute:
              type: string
            cost:
              type: number
            location:
              type: string
              maxLength: 4
    BriefPolicy:
      type: object
      properties:
        id:
          description: Internal ID
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          description: Name
          type: string
        department:
          description: Department Name
          type: string
    TowerWebhookNotification:
      type: object
      properties:
        id:
          description: jobId
          type: integer
        name:
          description: jobName
          type: string
        url:
          description: URL to Job on Tower
          type: string
        created_by:
          $ref: '#/components/schemas/UUID'
        started:
          description: Date/Time job started
          type: string
          format: date-time
          x-nullable: true
        finished:
          description: Date/Time job finished
          type: string
          format: date-time
          x-nullable: true
        status:
          description: Job status
          type: string
        traceback:
          description: Traceback if failed
          type: string
          x-nullable: true
        inventory:
          description: Inventory used by Job
          type: string
          x-nullable: true
        project:
          description: Project job belongs to
          type: string
          x-nullable: true
        playbook:
          description: Playbook executed in Job
          type: string
          x-nullable: true
        credential:
          description: Credential used by Job
          type: string
          x-nullable: true
        limit:
          description: Job limit
          type: string
          x-nullable: true
        extra_vars:
          type: string
          description: Extra variables for playbook encoded as a dictionary within a string
          x-nullable: true
        hosts:
          type: object
          additionalProperties:
            type: object
            properties:
              localhost:
                type: object
                properties:
                  failed:
                    type: boolean
                  changed:
                    type: integer
                  dark:
                    type: integer
                  failures:
                    type: integer
                  ok:
                    type: integer
                  processed:
                    type: integer
                  skipped:
                    type: integer
                  rescued:
                    type: integer
                  ignored:
                    type: integer
          x-nullable: true
        body:
          type: string
          description: Enumerates all the nodes in the workflow job with a description of the job associated with each
          x-nullable: true

  parameters:
    lab_tower_id:
      name: id
      in: path
      description: ID of the tower
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    lab_region_id:
      name: id
      in: path
      description: ID of the region
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    lab_cluster_id:
      name: id
      in: path
      description: ID of the cluster
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    lab_template_id:
      name: id
      in: path
      description: ID of the template
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    lab_bundle_id:
      name: id
      in: path
      description: ID of the bundle
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    user_id:
      name: id
      in: path
      description: ID of the user
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
    group_id:
      name: id
      in: path
      description: ID of the user
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
    role_id:
      name: id
      in: path
      description: ID of the auth role
      required: true
      schema:
        $ref: '#/components/schemas/UUID'
    tower_server_id:
      name: server_id
      in: path
      description: ID of the Tower server
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    tower_template_id:
      name: template_id
      in: path
      description: ID of the Tower template
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    tower_job_id:
      name: job_id
      in: path
      description: ID of the Tower job
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    policy_id:
      name: id
      in: path
      description: ID of the Policy
      required: true
      schema:
        $ref: '#/components/schemas/ID'

  requestBodies:

    tower_webhook_notification_post:
      description: Webhook notification from Tower
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TowerWebhookNotification'

    lab_tower_post:
      description: Tower
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/LabTower'
              - required:
                  - name
                  - url
    lab_tower_patch:
      description: Tower properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabTower'
    lab_region_post:
      description: |
        `quota` and `lifespan` can be set to `null` to provide unlimited access
        to the region.

        `users_group` limits region to a selected group of users, if the value
        is `null` any user can use region.
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/LabRegion'
              - required:
                  - name
                  - tower_id
          example:
            name: rdu2-a
            location: RDU
            enabled: true
            reservation_enabled: true
            lifespan_length: 60
            quota:
              num_vcpus: 40
              ram_mb: 200000
              num_volumes: 40
              volumes_gb: 540
            tower_id: 1
    lab_region_patch:
      description: |
        Region properties to update.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabRegion'
          example:
            lifespan_length: 60
            quota:
              num_vcpus: 40
              ram_mb: 200000
              num_volumes: 40
              volumes_gb: 500
    lab_cluster_post:
      description: Cluster
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/LabCluster'
              - required:
                  - name
                  - user_id
                  - region_id
                  - template_id
    lab_cluster_patch:
      description: Cluster properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabCluster'
    lab_template_post:
      description: Template
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/LabTemplate'
              - required:
                  - name
    lab_template_patch:
      description: Template properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabTemplate'
    lab_template_id:
      description: Template ID
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: '#/components/schemas/ID'
    lab_bundle_post:
      description: Bundle
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/LabBundle'
              - required:
                  - name
    lab_bundle_patch:
      description: Bundle properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabBundle'
    lab_bundle_id:
      description: Bundle ID
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: '#/components/schemas/ID'
    user_post:
      description: User
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/User'
              - required:
                  - username
                  - email
          example:
            username: alice
            email: alice@example.com
            firstName: Alice
            lastName: Example
            password: p4ssw0rd
    user_patch:
      description: User properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
          example:
            email: alice-new@example.com
            lastName: New
    group_post:
      description: Group
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/Group'
              - required:
                  - name
          example:
            name: admin
            attributes:
              mailing-list:
                - admin-list@example.com
    group_patch:
      description: Group properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Group'
          example:
            attributes:
              mailing-list:
                - admin-list@example.com
    group_id:
      description: Group ID
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: '#/components/schemas/UUID'
    role_post:
      description: Role
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/Role'
              - required:
                  - name
          example:
            name: admin
    role_patch:
      description: Role properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Role'
          example:
            composite: true
    role_id:
      description: Role ID
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: '#/components/schemas/UUID'
    tower_server_post:
      description: Tower Server
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/TowerServer'
              - required:
                  - name
                  - url
                  - credentials
          example:
            name: default
            url: https://tower.example.com
            credentials: kv/tower/prod/rhub
    tower_server_patch:
      description: Tower Server properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TowerServer'
          example:
            description: Default Tower server
    tower_server_id:
      description: Tower Server ID
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: '#/components/schemas/ID'
    tower_template_post:
      description: Tower Template
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/TowerTemplate'
              - required:
                  - name
                  - server_id
                  - tower_template_id
          example:
            name: Create OpenStack project
            tower_id: 1
            tower_template_id: 123
    tower_template_patch:
      description: Tower Template properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TowerServer'
          example:
            description: Template to create a new project in OpenStack
    tower_template_id:
      description: Tower Template ID
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: '#/components/schemas/ID'
    tower_template_launch:
      description: Tower Template launch parameters
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              extra_vars:
                type: object
                description: Extra variable to pass to the template
            required:
              - extra_vars
          example:
            extra_vars:
              project_name: example-project
              project_owner: example-user
    policy_post:
      description: Policy
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/Policy'
              - required:
                  - name
                  - department
          example:
            name: Test User
            department: Test Department
            constraint:
              location: RDU2
    policy_patch:
      description: Policy properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Policy'
          example:
            constraint:
              location: RDU2
    policy_search:
      description: Policy search
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/Policy'
          example:
            constraint:
              location: RDU2


  responses:

    problem:
      description: Problem details ([RFC 7807](https://tools.ietf.org/html/rfc7807))
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
              title:
                type: string
              detail:
                type: string
              status:
                type: integer
            additionalProperties: true
          example: {
            "detail": "Invalid token",
            "status": 401,
            "title": "Unauthorized",
            "type": "about:blank"
          }

    lab_tower_get:
      description: Tower
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabTower'
    lab_tower_list:
      description: List of Tower
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LabTower'
    lab_region_get:
      description: Region
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabRegion'
    lab_region_list:
      description: List of Region
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LabRegion'
    lab_cluster_get:
      description: Cluster
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabCluster'
    lab_cluster_list:
      description: List of Cluster
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LabCluster'
    lab_template_get:
      description: Template
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabTemplate'
    lab_template_list:
      description: List of Template
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LabTemplate'
    lab_bundle_get:
      description: Bundle
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LabBundle'
    lab_bundle_list:
      description: List of Bundle
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/LabBundle'
    user_get:
      description: User
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    user_list:
      description: List of User
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
    group_get:
      description: Group
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Group'
    group_list:
      description: List of Group
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Group'
          example:
            - id: fa831aa3-7a5a-4667-9c3f-bf20465058f6
              name: admin
              path: /admin
              subGroups: []
    role_get:
      description: Role
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Role'
    role_list:
      description: List of Role
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Role'
          example:
            - id: fa831aa3-7a5a-4667-9c3f-bf20465058f6
              name: admin
              description: adminRole

    auth_token:
      description: Auth token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthToken'
    auth_token_info:
      description: Auth token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthTokenInfo'
    tower_server_get:
      description: Tower Server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TowerServer'
    tower_server_list:
      description: List of Tower Server
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TowerServer'
    tower_template_get:
      description: Tower Template
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/TowerTemplate'
              - type: object
                properties:
                  tower_survey:
                    type: object
                    description: Survey spec from Tower API
    tower_template_list:
      description: List of Tower Template
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TowerTemplate'
    tower_job_get:
      description: Tower Job
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TowerJob'
    tower_job_list:
      description: List of Tower Jobs
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TowerJob'
    policies_list:
      description: List of Policies
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/BriefPolicy'
    policies_get:
      description: Policy
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Policy'


  securitySchemes:
    basic:
      type: http
      scheme: basic
      x-basicInfoFunc: rhub.api.auth.token.basic_auth
    oauth2:
      type: http
      scheme: bearer
      bearerFormat: Bearer
      x-bearerInfoFunc: rhub.api.auth.token.decode_token
      x-tokenInfoFunc: rhub.api.auth.token.get_token_info
    tower_webhook_notification_auth:
      type: http
      scheme: basic
      x-basicInfoFunc: rhub.api.tower.webhook_auth

tags:
  - name: lab
    description: Clusters for testing purposes.
  - name: auth
    description: Authentication related functions.

paths:
  /cowsay:
    get:
      summary: Most important endpoint!
      tags: [health]
      operationId: rhub.api.health.cowsay
      responses:
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
  /ping:
    get:
      summary: Basic availablity endpoint
      tags: [health]
      operationId: rhub.api.health.ping
      responses:
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                enum: [pong]

  /lab/tower:
    get:
      summary: Get tower list
      tags: [lab]
      operationId: rhub.api.lab.tower.list_towers
      responses:
        200:
          $ref: '#/components/responses/lab_tower_list'
        default:
          $ref: '#/components/responses/problem'
    post:
      summary: Create tower
      tags: [lab]
      operationId: rhub.api.lab.tower.create_tower
      requestBody:
        $ref: '#/components/requestBodies/lab_tower_post'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
  /lab/tower/{id}:
    get:
      summary: Get tower
      tags: [lab]
      operationId: rhub.api.lab.tower.get_tower
      parameters:
        - $ref: '#/components/parameters/lab_tower_id'
      responses:
        200:
          $ref: '#/components/responses/lab_tower_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/problem'
    patch:
      summary: Update tower
      tags: [lab]
      operationId: rhub.api.lab.tower.update_tower
      parameters:
        - $ref: '#/components/parameters/lab_tower_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_tower_patch'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
    delete:
      summary: Delete tower
      tags: [lab]
      operationId: rhub.api.lab.tower.delete_tower
      parameters:
        - $ref: '#/components/parameters/lab_tower_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
  /lab/region:
    get:
      summary: Get region list
      tags: [lab]
      operationId: rhub.api.lab.region.list_regions
      responses:
        200:
          $ref: '#/components/responses/lab_region_list'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    post:
      summary: Create region
      description: |
        See [create cluster endpoint](#/lab/rhub.api.lab.cluster.create_cluster)
        for more info how reservation, lifespan, and other properties affects clusters.
      tags: [lab]
      operationId: rhub.api.lab.region.create_region
      requestBody:
        $ref: '#/components/requestBodies/lab_region_post'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /lab/region/{id}:
    get:
      summary: Get region
      tags: [lab]
      operationId: rhub.api.lab.region.get_region
      parameters:
        - $ref: '#/components/parameters/lab_region_id'
      responses:
        200:
          $ref: '#/components/responses/lab_region_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    patch:
      summary: Update region
      tags: [lab]
      operationId: rhub.api.lab.region.update_region
      parameters:
        - $ref: '#/components/parameters/lab_region_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_region_patch'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    delete:
      summary: Delete region
      tags: [lab]
      operationId: rhub.api.lab.region.delete_region
      parameters:
        - $ref: '#/components/parameters/lab_region_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /lab/region/{id}/templates:
    get:
      summary: Get templates available on region
      tags: [lab]
      operationId: rhub.api.lab.region.list_region_templates
      parameters:
        - $ref: '#/components/parameters/lab_region_id'
      responses:
        200:
          $ref: '#/components/responses/lab_template_list'
        default:
          $ref: '#/components/responses/problem'
    post:
      summary: Add template to region
      tags: [lab]
      operationId: rhub.api.lab.region.add_region_template
      parameters:
        - $ref: '#/components/parameters/lab_region_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_template_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
    delete:
      summary: Remove template from region
      tags: [lab]
      operationId: rhub.api.lab.region.delete_region_template
      parameters:
        - $ref: '#/components/parameters/lab_region_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_template_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
  /lab/template:
    get:
      summary: Get template list
      tags: [lab]
      operationId: rhub.api.lab.template.list_templates
      responses:
        200:
          $ref: '#/components/responses/lab_template_list'
        default:
          $ref: '#/components/responses/problem'
    post:
      summary: Create template
      tags: [lab]
      operationId: rhub.api.lab.template.create_template
      requestBody:
        $ref: '#/components/requestBodies/lab_template_post'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
  /lab/template/{id}:
    get:
      summary: Get template
      tags: [lab]
      operationId: rhub.api.lab.template.get_template
      parameters:
        - $ref: '#/components/parameters/lab_template_id'
      responses:
        200:
          $ref: '#/components/responses/lab_template_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/problem'
    patch:
      summary: Update template
      tags: [lab]
      operationId: rhub.api.lab.template.update_template
      parameters:
        - $ref: '#/components/parameters/lab_template_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_template_patch'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
    delete:
      summary: Delete template
      tags: [lab]
      operationId: rhub.api.lab.template.delete_template
      parameters:
        - $ref: '#/components/parameters/lab_template_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
  /lab/template/{id}/bundles:
    get:
      summary: Get bundles available for template
      tags: [lab]
      operationId: rhub.api.lab.template.list_template_bundles
      parameters:
        - $ref: '#/components/parameters/lab_template_id'
      responses:
        200:
          $ref: '#/components/responses/lab_bundle_list'
        default:
          $ref: '#/components/responses/problem'
    post:
      summary: Add bundle to template
      tags: [lab]
      operationId: rhub.api.lab.template.add_template_bundle
      parameters:
        - $ref: '#/components/parameters/lab_template_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_bundle_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
    delete:
      summary: Remove bundle from template
      tags: [lab]
      operationId: rhub.api.lab.template.delete_template_bundle
      parameters:
        - $ref: '#/components/parameters/lab_template_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_bundle_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
  /lab/bundle:
    get:
      summary: Get bundle list
      tags: [lab]
      operationId: rhub.api.lab.bundle.list_bundles
      responses:
        200:
          $ref: '#/components/responses/lab_bundle_list'
        default:
          $ref: '#/components/responses/problem'
    post:
      summary: Create bundle
      tags: [lab]
      operationId: rhub.api.lab.bundle.create_bundle
      requestBody:
        $ref: '#/components/requestBodies/lab_bundle_post'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
  /lab/bundle/{id}:
    get:
      summary: Get bundle
      tags: [lab]
      operationId: rhub.api.lab.bundle.get_bundle
      parameters:
        - $ref: '#/components/parameters/lab_bundle_id'
      responses:
        200:
          $ref: '#/components/responses/lab_bundle_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/problem'
    patch:
      summary: Update bundle
      tags: [lab]
      operationId: rhub.api.lab.bundle.update_bundle
      parameters:
        - $ref: '#/components/parameters/lab_bundle_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_bundle_patch'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
    delete:
      summary: Delete bundle
      tags: [lab]
      operationId: rhub.api.lab.bundle.delete_bundle
      parameters:
        - $ref: '#/components/parameters/lab_bundle_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
  /lab/cluster:
    get:
      summary: Get cluster list
      tags: [lab]
      operationId: rhub.api.lab.cluster.list_clusters
      responses:
        200:
          $ref: '#/components/responses/lab_cluster_list'
        default:
          $ref: '#/components/responses/problem'
    post:
      summary: Create cluster
      description: |
        When the Reservation System is enabled in a region, a new cluster in
        that region will be required to select the length of the reservation in
        `reservation_expiration` field. Reservation sets soft-limit on cluster,
        when reservation expires cluster will be scheduled for deletion.

        When the Lifespan System is enabled in a region, `lifespan_expiration`
        date will automatically be applied to the cluster by backend at time of
        creation. The date is configured on region. Unlike the reservation
        expiration, lifespan is hard-limit and this date can not be set nor
        modified once cluster is created. When livespan expires cluster will be
        unconditionally scheduled for deletion
      tags: [lab]
      operationId: rhub.api.lab.cluster.create_cluster
      requestBody:
        $ref: '#/components/requestBodies/lab_cluster_post'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
  /lab/cluster/{id}:
    get:
      summary: Get cluster
      tags: [lab]
      operationId: rhub.api.lab.cluster.get_cluster
      parameters:
        - $ref: '#/components/parameters/lab_cluster_id'
      responses:
        200:
          $ref: '#/components/responses/lab_cluster_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/problem'
    patch:
      summary: Update cluster
      description: |
        See [create cluster endpoint](#/lab/rhub.api.lab.cluster.create_cluster) for more info.
      tags: [lab]
      operationId: rhub.api.lab.cluster.update_cluster
      parameters:
        - $ref: '#/components/parameters/lab_cluster_id'
      requestBody:
        $ref: '#/components/requestBodies/lab_cluster_patch'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
    delete:
      summary: Delete cluster
      tags: [lab]
      operationId: rhub.api.lab.cluster.delete_cluster
      parameters:
        - $ref: '#/components/parameters/lab_cluster_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
  /auth/user:
    get:
      summary: Get user list
      description: |
        See also [Keycloak API: UserRepresentation](
          https://www.keycloak.org/docs-api/11.0/rest-api/#_userrepresentation)
      tags: [auth]
      operationId: rhub.api.auth.user.list_users
      responses:
        200:
          $ref: '#/components/responses/user_list'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    post:
      summary: Create user
      description: |
        Create a user in the database. Returns created user data with extra
        fields added by auth database (UUID and other fields).

        See also [Keycloak API: UserRepresentation](
          https://www.keycloak.org/docs-api/11.0/rest-api/#_userrepresentation)
      tags: [auth]
      operationId: rhub.api.auth.user.create_user
      requestBody:
        $ref: '#/components/requestBodies/user_post'
      responses:
        200:
          description: User successfully created
          $ref: '#/components/responses/user_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /auth/user/{id}:
    get:
      summary: Get user
      description: |
        Returns user data including extra fields added by auth database. Data
        object contains at least properties that are in the schema but also
        database internal data like `createdTimestamp` and others.

        See also [Keycloak API: UserRepresentation](
          https://www.keycloak.org/docs-api/11.0/rest-api/#_userrepresentation)
      tags: [auth]
      operationId: rhub.api.auth.user.get_user
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          $ref: '#/components/responses/user_get'
        404:
          description: User not found
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    patch:
      summary: Update user
      description: |
        Update user in the database. Returns updated user data including extra
        fields added by auth database.

        See also [Keycloak API: UserRepresentation](
          https://www.keycloak.org/docs-api/11.0/rest-api/#_userrepresentation)
      tags: [auth]
      operationId: rhub.api.auth.user.update_user
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        $ref: '#/components/requestBodies/user_patch'
      responses:
        200:
          description: User successfully updated
          $ref: '#/components/responses/user_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    delete:
      summary: Delete user
      tags: [auth]
      operationId: rhub.api.auth.user.delete_user
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          description: User successfully deleted
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /auth/user/{id}/groups:
    get:
      summary: Get user groups
      description: |
        See also [Keycloak API: GroupRepresentation](
         https://www.keycloak.org/docs-api/11.0/rest-api/#_grouprepresentation)
      tags: [auth]
      operationId: rhub.api.auth.user.list_user_groups
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          $ref: '#/components/responses/group_list'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    post:
      summary: Add user to group
      tags: [auth]
      operationId: rhub.api.auth.user.add_user_group
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        $ref: '#/components/requestBodies/group_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    delete:
      summary: Remove user from group
      tags: [auth]
      operationId: rhub.api.auth.user.delete_user_group
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        $ref: '#/components/requestBodies/group_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /auth/user/{id}/roles:
    get:
      summary: Get user roles
      tags: [auth]
      operationId: rhub.api.auth.user.list_user_roles
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        200:
          $ref: '#/components/responses/role_list'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    post:
      summary: Add user to role
      tags: [auth]
      operationId: rhub.api.auth.user.add_user_role
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        $ref: '#/components/requestBodies/role_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    delete:
      summary: Remove user from role
      tags: [auth]
      operationId: rhub.api.auth.user.delete_user_role
      parameters:
        - $ref: '#/components/parameters/user_id'
      requestBody:
        $ref: '#/components/requestBodies/role_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /auth/group:
    get:
      summary: Get group list
      description: |
        See also [Keycloak API: GroupRepresentation](
         https://www.keycloak.org/docs-api/11.0/rest-api/#_grouprepresentation)
      tags: [auth]
      operationId: rhub.api.auth.group.list_groups
      responses:
        200:
          $ref: '#/components/responses/group_list'
        default:
          $ref: '#/components/responses/problem'
    post:
      summary: Create group
      description: |
        Create a group in the database. Returns created group data with extra
        fields added by auth database (UUID and other fields).

        See also [Keycloak API: GroupRepresentation](
         https://www.keycloak.org/docs-api/11.0/rest-api/#_grouprepresentation)
      tags: [auth]
      operationId: rhub.api.auth.group.create_group
      requestBody:
        $ref: '#/components/requestBodies/group_post'
      responses:
        200:
          description: Success
          $ref: '#/components/responses/group_get'
        default:
          $ref: '#/components/responses/problem'
  /auth/group/{id}:
    get:
      summary: Get group
      description: |
        Returns group data including extra fields added by auth database. Data
        object contains at least properties that are in the schema but also
        database internal data like `subGroups` and others.

        See also [Keycloak API: GroupRepresentation](
         https://www.keycloak.org/docs-api/11.0/rest-api/#_grouprepresentation)
      tags: [auth]
      operationId: rhub.api.auth.group.get_group
      parameters:
        - $ref: '#/components/parameters/group_id'
      responses:
        200:
          $ref: '#/components/responses/group_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/problem'
    patch:
      summary: Update group
      description: |
        Update group in the database. Returns updated group data including extra
        fields added by auth database.

        See also [Keycloak API: GroupRepresentation](
         https://www.keycloak.org/docs-api/11.0/rest-api/#_grouprepresentation)
      tags: [auth]
      operationId: rhub.api.auth.group.update_group
      parameters:
        - $ref: '#/components/parameters/group_id'
      requestBody:
        $ref: '#/components/requestBodies/group_patch'
      responses:
        200:
          description: Success
          $ref: '#/components/responses/group_get'
        default:
          $ref: '#/components/responses/problem'
    delete:
      summary: Delete group
      tags: [auth]
      operationId: rhub.api.auth.group.delete_group
      parameters:
        - $ref: '#/components/parameters/group_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
  /auth/group/{id}/users:
    get:
      summary: Get users in group
      description: |
        See also [Keycloak API: UserRepresentation](
          https://www.keycloak.org/docs-api/11.0/rest-api/#_userrepresentation)
      tags: [auth]
      operationId: rhub.api.auth.group.list_group_users
      parameters:
        - $ref: '#/components/parameters/group_id'
      responses:
        200:
          $ref: '#/components/responses/user_list'
        default:
          $ref: '#/components/responses/problem'
  /auth/group/{id}/roles:
    get:
      summary: Get group roles
      tags: [auth]
      operationId: rhub.api.auth.group.list_group_roles
      parameters:
        - $ref: '#/components/parameters/group_id'
      responses:
        200:
          $ref: '#/components/responses/role_list'
        default:
          $ref: '#/components/responses/problem'
    post:
      summary: Add group to role
      tags: [auth]
      operationId: rhub.api.auth.group.add_group_role
      parameters:
        - $ref: '#/components/parameters/group_id'
      requestBody:
        $ref: '#/components/requestBodies/role_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
    delete:
      summary: Remove group from role
      tags: [auth]
      operationId: rhub.api.auth.group.delete_group_role
      parameters:
        - $ref: '#/components/parameters/group_id'
      requestBody:
        $ref: '#/components/requestBodies/role_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
  /auth/role:
    get:
      summary: Get role list
      description: |
        See [Keycloak API: RoleRepresentation](
         https://www.keycloak.org/docs-api/11.0/rest-api/#_rolerepresentation)
      tags: [auth]
      operationId: rhub.api.auth.role.list_roles
      responses:
        200:
          $ref: '#/components/responses/role_list'
        default:
          $ref: '#/components/responses/problem'
    post:
      summary: Create role
      description: |
        Create a role in the database. Returns created role data with extra
        fields added by auth database (UUID and other fields).

        See [Keycloak API: RoleRepresentation](
         https://www.keycloak.org/docs-api/11.0/rest-api/#_rolerepresentation)
      tags: [auth]
      operationId: rhub.api.auth.role.create_role
      requestBody:
        $ref: '#/components/requestBodies/role_post'
      responses:
        200:
          description: Success
          $ref: '#/components/responses/role_get'
        default:
          $ref: '#/components/responses/problem'
  /auth/role/{id}:
    get:
      summary: Get role
      description: |
        Returns role data including extra fields added by auth database. Data
        object contains at least properties that are in the schema but also
        database internal data like `description` and others.

        See [Keycloak API: RoleRepresentation](
         https://www.keycloak.org/docs-api/11.0/rest-api/#_rolerepresentation)
      tags: [auth]
      operationId: rhub.api.auth.role.get_role
      parameters:
        - $ref: '#/components/parameters/role_id'
      responses:
        200:
          $ref: '#/components/responses/role_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/problem'
    patch:
      summary: Update role
      description: |
        Update role in the database. Returns updated role data including extra
        fields added by auth database.

        See [Keycloak API: RoleRepresentation](
         https://www.keycloak.org/docs-api/11.0/rest-api/#_rolerepresentation)
      tags: [auth]
      operationId: rhub.api.auth.role.update_role
      parameters:
        - $ref: '#/components/parameters/role_id'
      requestBody:
        $ref: '#/components/requestBodies/role_patch'
      responses:
        200:
          description: Success
          $ref: '#/components/responses/role_get'
        default:
          $ref: '#/components/responses/problem'
    delete:
      summary: Delete role
      tags: [auth]
      operationId: rhub.api.auth.role.delete_role
      parameters:
        - $ref: '#/components/parameters/role_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
  /auth/token:
    get:
      summary: Get auth token info
      tags: [auth]
      operationId: rhub.api.auth.token.get_token_info
      responses:
        200:
          $ref: '#/components/responses/auth_token_info'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /auth/token/create:
    post:
      summary: Login and get access token
      description: |
        This endpoint requires HTTP basic authentication. If credentials are
        correct then it returns oauth2 token info - access token, refresh token
        and some other informations about generated token.
      tags: [auth]
      operationId: rhub.api.auth.token.create_token
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            example: Basic dXNlcm5hbWU6cGFzc3dvcmQ=
          required: true
      responses:
        200:
          $ref: '#/components/responses/auth_token'
        default:
          $ref: '#/components/responses/problem'
  /auth/token/refresh:
    post:
      summary: Refresh token
      description: |
        This endpoint requires HTTP bearer authentication. The bearer token in
        'Authorization' header is not access token but refresh token. If refresh
        was successful return new oauth2 token info. Response is the same as
        from token create endpoint.
      tags: [auth]
      operationId: rhub.api.auth.token.refresh_token
      parameters:
        - in: header
          name: Authorization
          description: Bearer token is refresh token, not access token!
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1...VLzc
          required: true
      responses:
        200:
          $ref: '#/components/responses/auth_token'
        default:
          $ref: '#/components/responses/problem'
  /me:
    get:
      summary: Get info about logged in user
      tags: [auth]
      operationId: rhub.api.auth.user.get_current_user
      responses:
        200:
          $ref: '#/components/responses/user_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/server:
    get:
      summary: Get list of Tower servers
      operationId: rhub.api.tower.list_servers
      tags: [tower]
      responses:
        200:
          $ref: '#/components/responses/tower_server_list'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    post:
      summary: Create Tower server
      operationId: rhub.api.tower.create_server
      tags: [tower]
      requestBody:
        $ref: '#/components/requestBodies/tower_server_post'
      responses:
        200:
          $ref: '#/components/responses/tower_server_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/server/{server_id}:
    get:
      summary: Get Tower server
      operationId: rhub.api.tower.get_server
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_server_id'
      responses:
        200:
          $ref: '#/components/responses/tower_server_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    patch:
      summary: Change Tower server
      operationId: rhub.api.tower.update_server
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_server_id'
      requestBody:
        $ref: '#/components/requestBodies/tower_server_patch'
      responses:
        200:
          $ref: '#/components/responses/tower_server_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    delete:
      operationId: rhub.api.tower.delete_server
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_server_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/template:
    get:
      summary: Get list of Tower templates
      operationId: rhub.api.tower.list_templates
      tags: [tower]
      responses:
        200:
          $ref: '#/components/responses/tower_template_list'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    post:
      summary: Create Tower template
      operationId: rhub.api.tower.create_template
      tags: [tower]
      requestBody:
        $ref: '#/components/requestBodies/tower_template_post'
      responses:
        200:
          $ref: '#/components/responses/tower_template_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/template/{template_id}:
    get:
      summary: Get Tower template
      operationId: rhub.api.tower.get_template
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_template_id'
      responses:
        200:
          $ref: '#/components/responses/tower_template_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    patch:
      summary: Change Tower template
      operationId: rhub.api.tower.update_template
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_template_id'
      requestBody:
        $ref: '#/components/requestBodies/tower_template_patch'
      responses:
        200:
          $ref: '#/components/responses/tower_template_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    delete:
      summary: Delete Tower template
      operationId: rhub.api.tower.delete_template
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_template_id'
      responses:
        200:
          description: success
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/template/{template_id}/launch:
    post:
      summary: Launch Tower template
      operationId: rhub.api.tower.launch_template
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_template_id'
      requestBody:
        $ref: '#/components/requestBodies/tower_template_launch'
      responses:
        200:
          $ref: '#/components/responses/tower_job_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/template/{template_id}/jobs:
    get:
      summary: List Tower template jobs
      operationId: rhub.api.tower.list_template_jobs
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_template_id'
      responses:
        200:
          $ref: '#/components/responses/tower_job_list'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/job:
    get:
      summary: List Tower jobs
      operationId: rhub.api.tower.list_jobs
      tags: [tower]
      responses:
        200:
          $ref: '#/components/responses/tower_job_list'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/job/{job_id}:
    get:
      summary: Get Tower job
      operationId: rhub.api.tower.get_job
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_job_id'
      responses:
        200:
          $ref: '#/components/responses/tower_job_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/job/{job_id}/relaunch:
    post:
      summary: Re-launch Tower job
      operationId: rhub.api.tower.relaunch_job
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_job_id'
      responses:
        200:
          $ref: '#/components/responses/tower_job_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/job/{job_id}/stdout:
    get:
      summary: Get stdout of Tower job
      operationId: rhub.api.tower.get_job_stdout
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_job_id'
      responses:
        200:
          description: Ansible output
          content:
            text/plain:
              schema:
                type: string
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/webhook_notification:
    post:
      summary: Incoming webhook notification from Tower
      tags: [tower]
      operationId: rhub.api.tower.webhook_notification
      requestBody:
        $ref: '#/components/requestBodies/tower_webhook_notification_post'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
      security:
        - tower_webhook_notification_auth: []
  /policies:
    get:
      summary: Get policy list
      tags: [policy]
      operationId: rhub.api.policies.list_policies
      responses:
        200:
          $ref: '#/components/responses/policies_list'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    post:
      summary: Create policy
      tags: [policy]
      operationId: rhub.api.policies.create_policy
      requestBody:
        $ref: '#/components/requestBodies/policy_post'
      responses:
        200:
          $ref: '#/components/responses/policies_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /policies/{id}:
    get:
      summary: Get policy
      tags: [policy]
      operationId: rhub.api.policies.get_policy
      parameters:
        - $ref: '#/components/parameters/policy_id'
      responses:
        200:
          $ref: '#/components/responses/policies_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    patch:
      summary: Update policy
      tags: [policy]
      operationId: rhub.api.policies.update_policy
      parameters:
        - $ref: '#/components/parameters/policy_id'
      requestBody:
        $ref: '#/components/requestBodies/policy_patch'
      responses:
        200:
          $ref: '#/components/responses/policies_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    delete:
      summary: Delete policy
      tags: [policy]
      operationId: rhub.api.policies.delete_policy
      parameters:
        - $ref: '#/components/parameters/policy_id'
      responses:
        200:
          $ref: '#/components/responses/policies_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /policies/search:
    post:
      summary: Search Policies
      tags: [policy]
      operationId: rhub.api.policies.search_policies
      requestBody:
        $ref: '#/components/requestBodies/policy_search'
      responses:
        200:
          $ref: '#/components/responses/policies_list'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
