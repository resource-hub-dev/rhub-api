openapi: '3.0.2'
info:
  title: Resource Hub
  version: '0.1'

servers:
  - url: /v0

components:
  schemas:
    ID:
      type: integer
      minimum: 1
    UUID:
      type: string
      format: uuid
    Name:
      type: string
      pattern: '^\w+$'
    TowerServer:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          $ref: '#/components/schemas/Name'
        description:
          type: string
        enabled:
          type: boolean
        url:
          type: string
          format: url
        credentials:
          type: string
          description: Tower credentials path (Vault mount/path)
    TowerTemplate:
      type: object
      properties:
        id:
          description: Internal ID
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          type: string
        description:
          type: string
        server_id:
          description: Reference to TowerServer (TowerServer.id)
          $ref: '#/components/schemas/ID'
        tower_template_id:
          description: ID of template in remote Tower
          $ref: '#/components/schemas/ID'
        tower_template_is_workflow:
          description: Is template workflow?
          type: boolean
    TowerJob:
      type: object
      properties:
        id:
          description: Internal ID
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        template_id:
          description: Reference to TowerTemplate (TowerTemplate.id)
          $ref: '#/components/schemas/ID'
        tower_job_id:
          description: ID of job in remote Tower
          $ref: '#/components/schemas/ID'
        launched_by:
          description: UUID of user who launched job
          $ref: '#/components/schemas/UUID'
        status:
          description: Job status
          type: string
        created_at:
          type: string
          format: date-time
        started:
          type: boolean
        started_at:
          type: string
          format: date-time
          x-nullable: true
        finished:
          type: boolean
        finished_at:
          type: string
          format: date-time
          x-nullable: true
        failed:
          type: boolean
    Policy:
      type: object
      properties:
        id:
          description: Internal ID
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          description: Name
          type: string
        department:
          description: Department Name
          type: string
        constraint:
          type: object
          properties:
            sched_avail:
              type: array
              items:
                type: string
                format: date-time
              maxItems: 2
            serv_avail:
              type: number
            consumption:
              type: string
            density:
              type: string
            attribute:
              type: string
            cost:
              type: number
            location:
              type: string
              maxLength: 4
    BriefPolicy:
      type: object
      properties:
        id:
          description: Internal ID
          allOf:
            - $ref: '#/components/schemas/ID'
            - readOnly: true
        name:
          description: Name
          type: string
        department:
          description: Department Name
          type: string
    TowerWebhookNotification:
      type: object
      properties:
        id:
          description: jobId
          type: integer
        name:
          description: jobName
          type: string
        url:
          description: URL to Job on Tower
          type: string
        created_by:
          $ref: '#/components/schemas/UUID'
        started:
          description: Date/Time job started
          type: string
          format: date-time
          x-nullable: true
        finished:
          description: Date/Time job finished
          type: string
          format: date-time
          x-nullable: true
        status:
          description: Job status
          type: string
        traceback:
          description: Traceback if failed
          type: string
          x-nullable: true
        inventory:
          description: Inventory used by Job
          type: string
          x-nullable: true
        project:
          description: Project job belongs to
          type: string
          x-nullable: true
        playbook:
          description: Playbook executed in Job
          type: string
          x-nullable: true
        credential:
          description: Credential used by Job
          type: string
          x-nullable: true
        limit:
          description: Job limit
          type: string
          x-nullable: true
        extra_vars:
          type: string
          description: Extra variables for playbook encoded as a dictionary within a string
          x-nullable: true
        hosts:
          type: object
          additionalProperties:
            type: object
            properties:
              localhost:
                type: object
                properties:
                  failed:
                    type: boolean
                  changed:
                    type: integer
                  dark:
                    type: integer
                  failures:
                    type: integer
                  ok:
                    type: integer
                  processed:
                    type: integer
                  skipped:
                    type: integer
                  rescued:
                    type: integer
                  ignored:
                    type: integer
          x-nullable: true
        body:
          type: string
          description: Enumerates all the nodes in the workflow job with a description of the job associated with each
          x-nullable: true

  parameters:
    tower_server_id:
      name: server_id
      in: path
      description: ID of the Tower server
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    tower_template_id:
      name: template_id
      in: path
      description: ID of the Tower template
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    tower_job_id:
      name: job_id
      in: path
      description: ID of the Tower job
      required: true
      schema:
        $ref: '#/components/schemas/ID'
    policy_id:
      name: id
      in: path
      description: ID of the Policy
      required: true
      schema:
        $ref: '#/components/schemas/ID'

  requestBodies:

    tower_webhook_notification_post:
      description: Webhook notification from Tower
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TowerWebhookNotification'

    tower_server_post:
      description: Tower Server
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/TowerServer'
              - required:
                  - name
                  - url
                  - credentials
          example:
            name: default
            url: https://tower.example.com
            credentials: kv/tower/prod/rhub
    tower_server_patch:
      description: Tower Server properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TowerServer'
          example:
            description: Default Tower server
    tower_server_id:
      description: Tower Server ID
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: '#/components/schemas/ID'
    tower_template_post:
      description: Tower Template
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/TowerTemplate'
              - required:
                  - name
                  - server_id
                  - tower_template_id
          example:
            name: Create OpenStack project
            tower_id: 1
            tower_template_id: 123
    tower_template_patch:
      description: Tower Template properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TowerServer'
          example:
            description: Template to create a new project in OpenStack
    tower_template_id:
      description: Tower Template ID
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - id
            properties:
              id:
                $ref: '#/components/schemas/ID'
    tower_template_launch:
      description: Tower Template launch parameters
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              extra_vars:
                type: object
                description: Extra variable to pass to the template
            required:
              - extra_vars
          example:
            extra_vars:
              project_name: example-project
              project_owner: example-user
    policy_post:
      description: Policy
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/Policy'
              - required:
                  - name
                  - department
          example:
            name: Test User
            department: Test Department
            constraint:
              location: RDU2
    policy_patch:
      description: Policy properties to update
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Policy'
          example:
            constraint:
              location: RDU2
    policy_search:
      description: Policy search
      required: true
      content:
        application/json:
          schema:
            type: object
            allOf:
              - $ref: '#/components/schemas/Policy'
          example:
            constraint:
              location: RDU2


  responses:
    problem: {$ref: 'common.yml#/responses/problem'}  # TODO remove

    tower_server_get:
      description: Tower Server
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TowerServer'
    tower_server_list:
      description: List of Tower Server
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TowerServer'
    tower_template_get:
      description: Tower Template
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/TowerTemplate'
              - type: object
                properties:
                  tower_survey:
                    type: object
                    description: Survey spec from Tower API
    tower_template_list:
      description: List of Tower Template
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TowerTemplate'
    tower_job_get:
      description: Tower Job
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TowerJob'
    tower_job_list:
      description: List of Tower Jobs
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TowerJob'
    policies_list:
      description: List of Policies
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/BriefPolicy'
    policies_get:
      description: Policy
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Policy'


  securitySchemes:
    basic:
      type: http
      scheme: basic
      x-basicInfoFunc: rhub.api.auth.token.basic_auth
    oauth2:
      type: http
      scheme: bearer
      bearerFormat: Bearer
      x-bearerInfoFunc: rhub.api.auth.token.decode_token
      x-tokenInfoFunc: rhub.api.auth.token.get_token_info
    tower_webhook_notification_auth:
      type: http
      scheme: basic
      x-basicInfoFunc: rhub.api.tower.webhook_auth

tags:
  - name: lab
    description: Clusters for testing purposes.
  - name: auth
    description: Authentication related functions.

paths:
  /cowsay:
    get:
      summary: Most important endpoint!
      tags: [health]
      operationId: rhub.api.health.cowsay
      responses:
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
  /ping:
    get:
      summary: Basic availablity endpoint
      tags: [health]
      operationId: rhub.api.health.ping
      responses:
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                enum: [pong]

  /lab/tower:
    get:
      $ref: 'lab.yml#/endpoints/tower_list'
    post:
      $ref: 'lab.yml#/endpoints/tower_create'
  /lab/tower/{tower_id}:
    get:
      $ref: 'lab.yml#/endpoints/tower_get'
    patch:
      $ref: 'lab.yml#/endpoints/tower_update'
    delete:
      $ref: 'lab.yml#/endpoints/tower_delete'
  /lab/region:
    get:
      $ref: 'lab.yml#/endpoints/region_list'
    post:
      $ref: 'lab.yml#/endpoints/region_create'
  /lab/region/{region_id}:
    get:
      $ref: 'lab.yml#/endpoints/region_get'
    patch:
      $ref: 'lab.yml#/endpoints/region_update'
    delete:
      $ref: 'lab.yml#/endpoints/region_delete'
  /lab/region/{region_id}/templates:
    get:
      $ref: 'lab.yml#/endpoints/region_list_templates'
    post:
      $ref: 'lab.yml#/endpoints/region_add_template'
    delete:
      $ref: 'lab.yml#/endpoints/region_remove_template'
  /lab/template:
    get:
      $ref: 'lab.yml#/endpoints/template_list'
    post:
      $ref: 'lab.yml#/endpoints/template_create'
  /lab/template/{template_id}:
    get:
      $ref: 'lab.yml#/endpoints/template_get'
    patch:
      $ref: 'lab.yml#/endpoints/template_update'
    delete:
      $ref: 'lab.yml#/endpoints/template_delete'
  /lab/template/{template_id}/bundles:
    get:
      $ref: 'lab.yml#/endpoints/template_list_bundles'
    post:
      $ref: 'lab.yml#/endpoints/template_add_bundle'
    delete:
      $ref: 'lab.yml#/endpoints/template_remove_bundle'
  /lab/bundle:
    get:
      $ref: 'lab.yml#/endpoints/bundle_list'
    post:
      $ref: 'lab.yml#/endpoints/bundle_create'
  /lab/bundle/{bundle_id}:
    get:
      $ref: 'lab.yml#/endpoints/bundle_get'
    patch:
      $ref: 'lab.yml#/endpoints/bundle_update'
    delete:
      $ref: 'lab.yml#/endpoints/bundle_delete'
  /lab/cluster:
    get:
      $ref: 'lab.yml#/endpoints/cluster_list'
    post:
      $ref: 'lab.yml#/endpoints/cluster_create'
  /lab/cluster/{cluster_id}:
    get:
      $ref: 'lab.yml#/endpoints/cluster_get'
    patch:
      $ref: 'lab.yml#/endpoints/cluster_update'
    delete:
      $ref: 'lab.yml#/endpoints/cluster_delete'

  /auth/user:
    get:
      $ref: 'auth.yml#/endpoints/user_list'
    post:
      $ref: 'auth.yml#/endpoints/user_create'
  /auth/user/{user_id}:
    get:
      $ref: 'auth.yml#/endpoints/user_get'
    patch:
      $ref: 'auth.yml#/endpoints/user_update'
    delete:
      $ref: 'auth.yml#/endpoints/user_delete'
  /auth/user/{user_id}/groups:
    get:
      $ref: 'auth.yml#/endpoints/user_list_groups'
    post:
      $ref: 'auth.yml#/endpoints/user_add_group'
    delete:
      $ref: 'auth.yml#/endpoints/user_remove_group'
  /auth/user/{user_id}/roles:
    get:
      $ref: 'auth.yml#/endpoints/user_list_roles'
    post:
      $ref: 'auth.yml#/endpoints/user_add_role'
    delete:
      $ref: 'auth.yml#/endpoints/user_remove_role'
  /auth/group:
    get:
      $ref: 'auth.yml#/endpoints/group_list'
    post:
      $ref: 'auth.yml#/endpoints/group_create'
  /auth/group/{group_id}:
    get:
      $ref: 'auth.yml#/endpoints/group_get'
    patch:
      $ref: 'auth.yml#/endpoints/group_update'
    delete:
      $ref: 'auth.yml#/endpoints/group_delete'
  /auth/group/{group_id}/users:
    get:
      $ref: 'auth.yml#/endpoints/group_list_users'
  /auth/group/{group_id}/roles:
    get:
      $ref: 'auth.yml#/endpoints/group_list_roles'
    post:
      $ref: 'auth.yml#/endpoints/group_add_role'
    delete:
      $ref: 'auth.yml#/endpoints/group_remove_role'
  /auth/role:
    get:
      $ref: 'auth.yml#/endpoints/role_list'
    post:
      $ref: 'auth.yml#/endpoints/role_create'
  /auth/role/{role_id}:
    get:
      $ref: 'auth.yml#/endpoints/role_get'
    patch:
      $ref: 'auth.yml#/endpoints/role_update'
    delete:
      $ref: 'auth.yml#/endpoints/role_delete'
  /auth/token:
    get:
      $ref: 'auth.yml#/endpoints/token_get_info'
  /auth/token/create:
    post:
      $ref: 'auth.yml#/endpoints/token_create'
  /auth/token/refresh:
    post:
      $ref: 'auth.yml#/endpoints/token_refresh'
  /me:
    get:
      $ref: 'auth.yml#/endpoints/me'

  /tower/server:
    get:
      summary: Get list of Tower servers
      operationId: rhub.api.tower.list_servers
      tags: [tower]
      responses:
        200:
          $ref: '#/components/responses/tower_server_list'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    post:
      summary: Create Tower server
      operationId: rhub.api.tower.create_server
      tags: [tower]
      requestBody:
        $ref: '#/components/requestBodies/tower_server_post'
      responses:
        200:
          $ref: '#/components/responses/tower_server_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/server/{server_id}:
    get:
      summary: Get Tower server
      operationId: rhub.api.tower.get_server
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_server_id'
      responses:
        200:
          $ref: '#/components/responses/tower_server_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    patch:
      summary: Change Tower server
      operationId: rhub.api.tower.update_server
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_server_id'
      requestBody:
        $ref: '#/components/requestBodies/tower_server_patch'
      responses:
        200:
          $ref: '#/components/responses/tower_server_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    delete:
      operationId: rhub.api.tower.delete_server
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_server_id'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/template:
    get:
      summary: Get list of Tower templates
      operationId: rhub.api.tower.list_templates
      tags: [tower]
      responses:
        200:
          $ref: '#/components/responses/tower_template_list'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    post:
      summary: Create Tower template
      operationId: rhub.api.tower.create_template
      tags: [tower]
      requestBody:
        $ref: '#/components/requestBodies/tower_template_post'
      responses:
        200:
          $ref: '#/components/responses/tower_template_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/template/{template_id}:
    get:
      summary: Get Tower template
      operationId: rhub.api.tower.get_template
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_template_id'
      responses:
        200:
          $ref: '#/components/responses/tower_template_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    patch:
      summary: Change Tower template
      operationId: rhub.api.tower.update_template
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_template_id'
      requestBody:
        $ref: '#/components/requestBodies/tower_template_patch'
      responses:
        200:
          $ref: '#/components/responses/tower_template_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    delete:
      summary: Delete Tower template
      operationId: rhub.api.tower.delete_template
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_template_id'
      responses:
        200:
          description: success
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/template/{template_id}/launch:
    post:
      summary: Launch Tower template
      operationId: rhub.api.tower.launch_template
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_template_id'
      requestBody:
        $ref: '#/components/requestBodies/tower_template_launch'
      responses:
        200:
          $ref: '#/components/responses/tower_job_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/template/{template_id}/jobs:
    get:
      summary: List Tower template jobs
      operationId: rhub.api.tower.list_template_jobs
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_template_id'
      responses:
        200:
          $ref: '#/components/responses/tower_job_list'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/job:
    get:
      summary: List Tower jobs
      operationId: rhub.api.tower.list_jobs
      tags: [tower]
      responses:
        200:
          $ref: '#/components/responses/tower_job_list'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/job/{job_id}:
    get:
      summary: Get Tower job
      operationId: rhub.api.tower.get_job
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_job_id'
      responses:
        200:
          $ref: '#/components/responses/tower_job_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/job/{job_id}/relaunch:
    post:
      summary: Re-launch Tower job
      operationId: rhub.api.tower.relaunch_job
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_job_id'
      responses:
        200:
          $ref: '#/components/responses/tower_job_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/job/{job_id}/stdout:
    get:
      summary: Get stdout of Tower job
      operationId: rhub.api.tower.get_job_stdout
      tags: [tower]
      parameters:
        - $ref: '#/components/parameters/tower_job_id'
      responses:
        200:
          description: Ansible output
          content:
            text/plain:
              schema:
                type: string
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /tower/webhook_notification:
    post:
      summary: Incoming webhook notification from Tower
      tags: [tower]
      operationId: rhub.api.tower.webhook_notification
      requestBody:
        $ref: '#/components/requestBodies/tower_webhook_notification_post'
      responses:
        200:
          description: Success
        default:
          $ref: '#/components/responses/problem'
      security:
        - tower_webhook_notification_auth: []
  /policies:
    get:
      summary: Get policy list
      tags: [policy]
      operationId: rhub.api.policies.list_policies
      responses:
        200:
          $ref: '#/components/responses/policies_list'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    post:
      summary: Create policy
      tags: [policy]
      operationId: rhub.api.policies.create_policy
      requestBody:
        $ref: '#/components/requestBodies/policy_post'
      responses:
        200:
          $ref: '#/components/responses/policies_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /policies/{id}:
    get:
      summary: Get policy
      tags: [policy]
      operationId: rhub.api.policies.get_policy
      parameters:
        - $ref: '#/components/parameters/policy_id'
      responses:
        200:
          $ref: '#/components/responses/policies_get'
        404:
          description: Not found
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    patch:
      summary: Update policy
      tags: [policy]
      operationId: rhub.api.policies.update_policy
      parameters:
        - $ref: '#/components/parameters/policy_id'
      requestBody:
        $ref: '#/components/requestBodies/policy_patch'
      responses:
        200:
          $ref: '#/components/responses/policies_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
    delete:
      summary: Delete policy
      tags: [policy]
      operationId: rhub.api.policies.delete_policy
      parameters:
        - $ref: '#/components/parameters/policy_id'
      responses:
        200:
          $ref: '#/components/responses/policies_get'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
  /policies/search:
    post:
      summary: Search Policies
      tags: [policy]
      operationId: rhub.api.policies.search_policies
      requestBody:
        $ref: '#/components/requestBodies/policy_search'
      responses:
        200:
          $ref: '#/components/responses/policies_list'
        default:
          $ref: '#/components/responses/problem'
      security:
        - oauth2: []
